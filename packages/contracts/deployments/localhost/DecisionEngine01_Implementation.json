{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumVotes",
          "type": "uint256"
        }
      ],
      "name": "QuorumVotesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "VotingDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_QUORUM_VOTES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_QUORUM_VOTES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PCT_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "_setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumVotes",
          "type": "uint256"
        }
      ],
      "name": "_setQuorumVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "_setVotingDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "_setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct IGovernorBravoDecisionEngine.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safe_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "enum IGovernorBravoDecisionEngine.TokenType",
          "name": "tokenType_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "votingPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingDelay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorumVotes_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalMaxOperations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safe",
      "outputs": [
        {
          "internalType": "contract IGnosisSafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernorBravoDecisionEngine.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenType",
      "outputs": [
        {
          "internalType": "enum IGovernorBravoDecisionEngine.TokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBalance",
          "type": "uint256"
        }
      ],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5693ba13c38b954ee95ad68bb5ec064b1b7665bbdf1e1f96995f1386f1b868e4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "5238905",
    "logsBloom": "0x
    "blockHash": "0xc47083ac68373ccfd774e31ee1fa32ba4be28e2935fd4b6e884037656115b12e",
    "transactionHash": "0x5693ba13c38b954ee95ad68bb5ec064b1b7665bbdf1e1f96995f1386f1b868e4",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "5238905",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2b79b106deed45f973e0f9fa1ff39c6e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"QuorumVotesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUORUM_VOTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_QUORUM_VOTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"_setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"_setQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"_setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"_setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct IGovernorBravoDecisionEngine.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"enum IGovernorBravoDecisionEngine.TokenType\",\"name\":\"tokenType_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"contract IGnosisSafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernorBravoDecisionEngine.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"enum IGovernorBravoDecisionEngine.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_setProposalThreshold(uint256)\":{\"details\":\"newProposalThreshold must be greater than the hardcoded min\",\"params\":{\"newProposalThreshold\":\"new proposal threshold\"}},\"_setQuorumVotes(uint256)\":{\"details\":\"newQuorumVotes must be greater than the hardcoded min\",\"params\":{\"newQuorumVotes\":\"new quorum votes\"}},\"_setVotingDelay(uint256)\":{\"params\":{\"newVotingDelay\":\"new voting delay, in blocks\"}},\"_setVotingPeriod(uint256)\":{\"params\":{\"newVotingPeriod\":\"new voting period, in blocks\"}},\"castVote(uint256,uint8)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"External function that accepts EIP-712 signatures for voting on proposals.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"reason\":\"The reason given for the vote by the voter\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"initialize(address,address,address,uint8,uint256,uint256,uint256,uint256)\":{\"params\":{\"proposalThreshold_\":\"The initial proposal threshold, in PCT_PRECISION\",\"quorumVotes_\":\"The amount of votes needed to pass a proposal, in PCT_PRECISION\",\"safe_\":\"The address of the Gnosis Safe\",\"token_\":\"The address of the governance token\",\"votingDelay_\":\"The initial voting delay\",\"votingPeriod_\":\"The initial voting period\"}},\"propose(address[],uint256[],string[],bytes[],string)\":{\"details\":\"propose to execute a series of transactions\"}},\"stateVariables\":{\"quorumVotes\":{\"details\":\"The percentage of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when implementation is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is changed\"},\"ProposalCanceled(uint256)\":{\"notice\":\"An event emitted when a proposal has been canceled\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint256)\":{\"notice\":\"An event emitted when a new proposal is created\"},\"ProposalExecuted(uint256)\":{\"notice\":\"An event emitted when a proposal has been executed in the Timelock\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"An event emitted when a proposal has been queued in the Timelock\"},\"ProposalThresholdSet(uint256,uint256)\":{\"notice\":\"Emitted when proposal threshold is set\"},\"QuorumVotesSet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting period is set\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"notice\":\"An event emitted when a vote has been cast on a proposal\"},\"VotingDelaySet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting delay is set\"},\"VotingPeriodSet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting period is set\"}},\"kind\":\"user\",\"methods\":{\"BALLOT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the ballot struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"MAX_PROPOSAL_THRESHOLD()\":{\"notice\":\"The maximum setable proposal threshold\"},\"MAX_QUORUM_VOTES()\":{\"notice\":\"The maximum setable quorum\"},\"MAX_VOTING_DELAY()\":{\"notice\":\"The max settable voting delay\"},\"MAX_VOTING_PERIOD()\":{\"notice\":\"The max settable voting period\"},\"MIN_PROPOSAL_THRESHOLD()\":{\"notice\":\"The minimum setable proposal threshold, in percent\"},\"MIN_QUORUM_VOTES()\":{\"notice\":\"The minimum setable quorum\"},\"MIN_VOTING_DELAY()\":{\"notice\":\"The min settable voting delay\"},\"MIN_VOTING_PERIOD()\":{\"notice\":\"The minimum settable voting period, in\"},\"NAME()\":{\"notice\":\"The name of this contract\"},\"_setProposalThreshold(uint256)\":{\"notice\":\"Admin function for setting the proposal threshold\"},\"_setQuorumVotes(uint256)\":{\"notice\":\"Admin function for setting the proposal threshold\"},\"_setVotingDelay(uint256)\":{\"notice\":\"Admin function for setting the voting delay\"},\"_setVotingPeriod(uint256)\":{\"notice\":\"Admin function for setting the voting period\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"castVote(uint256,uint8)\":{\"notice\":\"Cast a vote for a proposal\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"notice\":\"Cast a vote for a proposal by signature\"},\"castVoteWithReason(uint256,uint8,string)\":{\"notice\":\"Cast a vote for a proposal with a reason\"},\"initialProposalId()\":{\"notice\":\"Initial proposal id set at become\"},\"initialize(address,address,address,uint8,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used to initialize the contract during delegator contructor\"},\"latestProposalIds(address)\":{\"notice\":\"The latest proposal for each proposer\"},\"proposalCount()\":{\"notice\":\"The total number of proposals\"},\"proposalMaxOperations()\":{\"notice\":\"The maximum number of actions that can be included in a proposal\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed\"},\"queue(uint256)\":{\"notice\":\"approve the Hash of the transaction in gnosis safe, to be executed there\"},\"safe()\":{\"notice\":\"The address of the Gnosis Safe\"},\"token()\":{\"notice\":\"The address of the governance token\"},\"votingDelay()\":{\"notice\":\"The delay before voting on a proposal may take place, once proposed, in blocks\"},\"votingPeriod()\":{\"notice\":\"The duration of voting on a proposal, in blocks\"}},\"notice\":\"This is a stripped-down version of [GovernorBravo contracts](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/) - basically, we only kept the \\\"propose - vote -execute\\\" flow - add configuration options to the constructor: - `safe` -> the address of a Gnosis safe that holds the assets and will execut the proposals - `token` -> the address of a token that determines the Voting Power - `tokenType` -> the kind of token (either Minime or ERC20snapshot) - `quorumVotes` - `proposalThreshold` - `votingDelay` - `votingPeriod` - rename `timelock` to `safe`, and `comp` to `token` - upgrade to solidity 0.7.3, which required some changes in syntax - call `token.balanceOfAt()` instead of `token.getPriorVotes()` - base all voting logic on the basis of the voting power distribution at proposal creation (GovernorAlpha checks the voting proposalThreshold at the block bf proposal creation, and counts the votes from the start time of the proposal) - change the semantics of `quorumvotes` and `proposalThreshold` to percentages, not absolute figures - change the semantics of `queue` so that is queues the transaction for execution in the Gnosis safe (by alling `approveHash`) - change the semantics of `execute` so the proposal will be executed in the Gnosis Safe - - (todo: removed the logic related to timelocks, because in Lego this kind of safety mechanism has a better place on the Gnosis Safe ) - (todo: removed the logic related to the guardian, becuase in the Lego Architecture this kind of permissioning is easier handled on the Gnosis Safe) - (todo: removed the delegator pattern, and use openzeppelin style proxies instead)d\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/decisionEngines/DecisionEngine01.sol\":\"DecisionEngine01\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/decisionEngines/DecisionEngine01.sol\":{\"content\":\"pragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IGnosisSafe.sol\\\";\\nimport \\\"../interfaces/IMiniMetoken.sol\\\";\\nimport \\\"../interfaces/IERC20Snapshot.sol\\\";\\nimport \\\"../interfaces/IGovernorBravoDecisionEngine.sol\\\";\\n\\n/**\\nThis is a stripped-down version of [GovernorBravo contracts](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/)\\n\\n- basically, we only kept the \\\"propose - vote -execute\\\" flow\\n- add configuration options to the constructor:\\n  - `safe` -> the address of a Gnosis safe that holds the assets and will execut the proposals\\n  - `token` -> the address of a token that determines the Voting Power\\n  - `tokenType` -> the kind of token (either Minime or ERC20snapshot)\\n  - `quorumVotes`\\n  - `proposalThreshold`\\n  - `votingDelay`\\n  - `votingPeriod`\\n- rename `timelock` to `safe`, and `comp` to `token`\\n- upgrade to solidity 0.7.3, which required some changes in syntax\\n\\n- call `token.balanceOfAt()` instead of `token.getPriorVotes()`\\n- base all voting logic on the basis of the voting power distribution at proposal creation\\n  (GovernorAlpha checks the voting proposalThreshold at the block bf proposal creation, and counts the votes\\n  from the start time of the proposal)\\n- change the semantics of `quorumvotes` and `proposalThreshold` to percentages, not absolute figures\\n\\n- change the semantics of `queue` so that is queues the transaction for execution in the Gnosis safe (by alling `approveHash`)\\n- change the semantics of `execute` so the proposal will be executed in the Gnosis Safe\\n-\\n- (todo: removed the logic related to timelocks, because in Lego this kind of safety mechanism has a better place on the Gnosis Safe )\\n- (todo: removed the logic related to the guardian, becuase in the Lego Architecture this kind of permissioning is easier handled on the Gnosis Safe)\\n- (todo: removed the delegator pattern, and use openzeppelin style proxies instead)d\\n */\\n\\ncontract DecisionEngine01 is IGovernorBravoDecisionEngine {\\n  using SafeMath for uint256;\\n  /// @notice The name of this contract\\n  string public constant NAME = \\\"Lego Decision Engine\\\";\\n\\n  // with how much precision percentages are expressed (i.e. 1.23% is represent as 1.123*PCT_PRECISION)\\n  uint256 public constant PCT_PRECISION = 1e18;\\n  /// @notice The minimum setable proposal threshold, in percent\\n  uint256 public constant MIN_PROPOSAL_THRESHOLD = 0; // 0 Comp\\n\\n  /// @notice The maximum setable proposal threshold\\n  uint256 public constant MAX_PROPOSAL_THRESHOLD = 100 * PCT_PRECISION; //100%\\n\\n  /// @notice The minimum setable quorum\\n  uint256 public constant MIN_QUORUM_VOTES = 0; // 0 Comp\\n\\n  /// @notice The maximum setable quorum\\n  uint256 public constant MAX_QUORUM_VOTES = 100; //100%\\n\\n  /// @notice The minimum settable voting period, in\\n  // TODO: 10 is very low, 5760, About 24 hours, is a more reasonable value\\n  uint256 public constant MIN_VOTING_PERIOD = 10; //\\n\\n  /// @notice The max settable voting period\\n  uint256 public constant MAX_VOTING_PERIOD = 80640; // About 2 weeks\\n\\n  /// @notice The min settable voting delay\\n  uint256 public constant MIN_VOTING_DELAY = 1;\\n\\n  /// @notice The max settable voting delay\\n  uint256 public constant MAX_VOTING_DELAY = 40320; // About 1 week\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n  /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n  bytes32 public constant BALLOT_TYPEHASH =\\n    keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n  /// @notice The maximum number of actions that can be included in a proposal\\n  uint256 public constant proposalMaxOperations = 10; // 10 actions\\n\\n  // Receipts of ballots for the entire set of voters\\n  mapping(uint256 => mapping(address => Receipt)) public receipts;\\n\\n  /// @notice Administrator for this contract\\n  address public admin;\\n\\n  /// @notice The address of the Gnosis Safe\\n  IGnosisSafe public safe;\\n\\n  /// @notice The address of the governance token\\n  address public token;\\n\\n  TokenType public tokenType;\\n\\n  /// @notice The official record of all proposals ever proposed\\n  mapping(uint256 => Proposal) public proposals;\\n\\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n  uint256 public votingDelay;\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  uint256 public votingPeriod;\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  uint256 public proposalThreshold;\\n\\n  /**\\n   * @dev The percentage of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n   */\\n  uint256 public quorumVotes;\\n\\n  /// @notice Initial proposal id set at become\\n  uint256 public initialProposalId;\\n\\n  /// @notice The total number of proposals\\n  uint256 public proposalCount;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint256) public latestProposalIds;\\n\\n  /**\\n   * @notice Used to initialize the contract during delegator contructor\\n   * @param safe_ The address of the Gnosis Safe\\n   * @param token_ The address of the governance token\\n   * @param votingPeriod_ The initial voting period\\n   * @param votingDelay_ The initial voting delay\\n   * @param proposalThreshold_ The initial proposal threshold, in PCT_PRECISION\\n   * @param quorumVotes_ The amount of votes needed to pass a proposal, in PCT_PRECISION\\n   */\\n  function initialize(\\n    address owner_,\\n    address safe_,\\n    address token_,\\n    TokenType tokenType_,\\n    uint256 votingPeriod_,\\n    uint256 votingDelay_,\\n    uint256 proposalThreshold_,\\n    uint256 quorumVotes_\\n  ) public {\\n    require(\\n      address(safe) == address(0),\\n      \\\"GovernorBravo::initialize: can only initialize once\\\"\\n    );\\n    // require(msg.sender == admin, \\\"GovernorBravo::initialize: admin only\\\");\\n    require(\\n      safe_ != address(0),\\n      \\\"GovernorBravo::initialize: invalid safe address\\\"\\n    );\\n    require(\\n      token_ != address(0),\\n      \\\"GovernorBravo::initialize: invalid token address\\\"\\n    );\\n    require(\\n      votingPeriod_ >= MIN_VOTING_PERIOD && votingPeriod_ <= MAX_VOTING_PERIOD,\\n      \\\"GovernorBravo::initialize: invalid voting period\\\"\\n    );\\n    require(\\n      votingDelay_ >= MIN_VOTING_DELAY && votingDelay_ <= MAX_VOTING_DELAY,\\n      \\\"GovernorBravo::initialize: invalid voting delay\\\"\\n    );\\n    require(\\n      proposalThreshold_ >= MIN_PROPOSAL_THRESHOLD &&\\n        proposalThreshold_ <= MAX_PROPOSAL_THRESHOLD,\\n      \\\"GovernorBravo::initialize: invalid proposal threshold\\\"\\n    );\\n    require(\\n      quorumVotes_ >= MIN_PROPOSAL_THRESHOLD &&\\n        quorumVotes_ <= MAX_PROPOSAL_THRESHOLD,\\n      \\\"GovernorBravo::initialize: invalid quorum\\\"\\n    );\\n\\n    admin = owner_;\\n    safe = IGnosisSafe(safe_);\\n    tokenType = tokenType_;\\n    token = token_;\\n    votingPeriod = votingPeriod_;\\n    votingDelay = votingDelay_;\\n    proposalThreshold = proposalThreshold_;\\n    quorumVotes = quorumVotes_;\\n  }\\n\\n  /* @dev return the voting power of member at the given blockNumber as a percentage of the total voting pwoer\\n   * NB: the voting power is rounded down to the nearest percentage point,\\n   * (which is fine for where it is used to check the proposalThreshold and quorumVotes, which are expressed in percentages)\\n   *\\n   * TODO: more precision...\\n   **/\\n  function votingPower(uint256 balance, uint256 totalBalance)\\n    public\\n    pure\\n    returns (uint256)\\n  {\\n    if (totalBalance == 0) {\\n      return 0;\\n    }\\n    require(\\n      balance <= totalBalance,\\n      \\\"DecisionEngine:votingPower: balance must be less than totalBalance\\\"\\n    );\\n    return balance.mul(PCT_PRECISION).div(totalBalance).mul(100);\\n  }\\n\\n  /** @dev propose to execute a series of transactions\\n   */\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) public override returns (uint256) {\\n    uint256 startBlock = block.number.add(votingDelay);\\n    uint256 endBlock = startBlock.add(votingPeriod);\\n    uint256 snapshotId;\\n    if (tokenType == TokenType.Minime) {\\n      snapshotId = block.number - 1;\\n    } else if (tokenType == TokenType.ERC20Snapshot) {\\n      snapshotId = IERC20Snapshot(token).snapshot();\\n    }\\n    // note that the check if for > proposalTreshold rather than >= proposalThreshold\\n    // so the error message is slightly off. We keep this to stay faithful to GovernorBravoDelegate.sol\\n    require(\\n      votingPower(\\n        IMiniMetoken(token).balanceOfAt(msg.sender, snapshotId),\\n        IMiniMetoken(token).totalSupplyAt(snapshotId)\\n      ) > proposalThreshold,\\n      \\\"GovernorBravo::propose: proposer votes below proposal threshold\\\"\\n    );\\n\\n    require(\\n      targets.length == values.length && targets.length == calldatas.length,\\n      \\\"GovernorBravo::propose: proposal function information arity mismatch\\\"\\n    );\\n    require(\\n      targets.length != 0,\\n      \\\"GovernorBravo::propose: must provide actions\\\"\\n    );\\n    require(\\n      targets.length <= proposalMaxOperations,\\n      \\\"GovernorBravo::propose: too many actions\\\"\\n    );\\n\\n    uint256 latestProposalId = latestProposalIds[msg.sender];\\n    if (latestProposalId != 0) {\\n      ProposalState proposersLatestProposalState = state(latestProposalId);\\n      require(\\n        proposersLatestProposalState != ProposalState.Active,\\n        \\\"GovernorBravo::propose: one live proposal per proposer, found an already active proposal\\\"\\n      );\\n      require(\\n        proposersLatestProposalState != ProposalState.Pending,\\n        \\\"GovernorBravo::propose: one live proposal per proposer, found an already pending proposal\\\"\\n      );\\n    }\\n\\n    proposalCount++;\\n    Proposal storage newProposal = proposals[proposalCount];\\n    newProposal.id = proposalCount;\\n    newProposal.proposer = msg.sender;\\n    newProposal.eta = 0;\\n    newProposal.targets = targets;\\n    newProposal.values = values;\\n    newProposal.signatures = signatures;\\n    newProposal.calldatas = calldatas;\\n    newProposal.startBlock = startBlock;\\n    newProposal.endBlock = endBlock;\\n    newProposal.forVotes = 0;\\n    newProposal.againstVotes = 0;\\n    newProposal.canceled = false;\\n    newProposal.executed = false;\\n    newProposal.snapshotId = snapshotId;\\n\\n    latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n    emit ProposalCreated(\\n      newProposal.id,\\n      msg.sender,\\n      targets,\\n      values,\\n      signatures,\\n      calldatas,\\n      startBlock,\\n      endBlock,\\n      description,\\n      snapshotId\\n    );\\n    return newProposal.id;\\n  }\\n\\n  /** approve the Hash of the transaction in gnosis safe, to be executed there\\n  \\n   */\\n  function queue(uint256 proposalId) public override {\\n    require(\\n      state(proposalId) == ProposalState.Succeeded,\\n      \\\"GovernorAlpha::execute: proposal can only be approved if it is Succeeded\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    uint256 nonce = safe.nonce();\\n\\n    // TODO: THIS IS THE WRONG APPROACH; we should approve the hash of a single encoded multisend transction here\\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\\n      bytes memory payload =\\n        abi.encodePacked(\\n          bytes4(keccak256(bytes(proposal.signatures[i]))),\\n          proposal.calldatas[i]\\n        );\\n      bytes32 txHash =\\n        safe.getTransactionHash(\\n          proposal.targets[i], //     address to,\\n          proposal.values[i], //     uint256 value,\\n          payload, //     bytes calldata data,\\n          IGnosisSafe.Operation.Call, //     Enum.Operation operation,\\n          0, //     uint256 safeTxGas,\\n          0, //     uint256 baseGas,\\n          0, //     uint256 gasPrice,\\n          address(0), //     address gasToken,\\n          address(0), //     address payable refundReceiver,\\n          nonce\\n        );\\n      // TODO: feels like the nonce logic needs some love\\n      nonce++;\\n      safe.approveHash(txHash);\\n    }\\n  }\\n\\n  /** \\n\\n  */\\n  function execute(uint256 proposalId) public override {\\n    require(\\n      state(proposalId) == ProposalState.Succeeded,\\n      \\\"GovernorAlpha::execute: proposal can only be executed if it is Succeeded\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    proposal.executed = true;\\n\\n    // we assume the Decision Engine is an owner of the multisig, and so we do\\n    // not need to actually sign the transaction, but just send over the address\\n    bytes memory sig =\\n      abi.encodePacked(bytes12(0), address(this), bytes32(0), uint8(1));\\n\\n    // TODO: THIS IS THE WRONG APPROACH; we should send a single transaction using MultiSend\\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\\n      bytes memory payload =\\n        abi.encodePacked(\\n          bytes4(keccak256(bytes(proposal.signatures[i]))),\\n          proposal.calldatas[i]\\n        );\\n      bool result =\\n        safe.execTransaction(\\n          proposal.targets[i], //     address to,\\n          proposal.values[i], //     uint256 value,\\n          payload, //     bytes calldata data,\\n          IGnosisSafe.Operation.Call, //     Enum.Operation operation,\\n          0, //     uint256 safeTxGas,\\n          0, //     uint256 baseGas,\\n          0, //     uint256 gasPrice,\\n          address(0), //     address gasToken,\\n          address(0), //     address payable refundReceiver,\\n          sig\\n        );\\n      require(result, \\\"Execution of transaction on safe failed\\\");\\n    }\\n    emit ProposalExecuted(proposalId);\\n  }\\n\\n  function getActions(uint256 proposalId)\\n    public\\n    view\\n    override\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      bytes[] memory calldatas\\n    )\\n  {\\n    Proposal storage p = proposals[proposalId];\\n    return (p.targets, p.values, p.calldatas);\\n  }\\n\\n  function getReceipt(uint256 proposalId, address voter)\\n    public\\n    view\\n    override\\n    returns (Receipt memory)\\n  {\\n    return receipts[proposalId][voter];\\n  }\\n\\n  function state(uint256 proposalId) public view returns (ProposalState) {\\n    require(\\n      proposalCount >= proposalId && proposalId > 0,\\n      \\\"GovernorAlpha::state: invalid proposal id\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n\\n    // TODO: decide if we want to cancel proposals in our in our decision machine\\n    if (proposal.canceled) {\\n      return ProposalState.Canceled;\\n    } else if (block.number <= proposal.startBlock) {\\n      return ProposalState.Pending;\\n    } else if (block.number <= proposal.endBlock) {\\n      return ProposalState.Active;\\n    } else if (\\n      votingPower(\\n        proposal.forVotes,\\n        IERC20Snapshot(token).totalSupplyAt(proposal.snapshotId)\\n      ) < quorumVotes\\n    ) {\\n      return ProposalState.Defeated;\\n      // TODO: we are not using eta eta, so it is always 0, and the cases stop here!\\n    } else if (proposal.eta == 0) {\\n      return ProposalState.Succeeded;\\n    } else if (proposal.executed) {\\n      return ProposalState.Executed;\\n      // } else if (block.timestamp >= add256(proposal.eta, safe.GRACE_PERIOD())) {\\n    } else if (block.timestamp >= proposal.eta) {\\n      return ProposalState.Expired;\\n    } else {\\n      return ProposalState.Queued;\\n    }\\n  }\\n\\n  /**\\n   * @notice Cast a vote for a proposal\\n   * @param proposalId The id of the proposal to vote on\\n   * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n   */\\n  function castVote(uint256 proposalId, uint8 support) external override {\\n    emit VoteCast(\\n      msg.sender,\\n      proposalId,\\n      support,\\n      castVoteInternal(msg.sender, proposalId, support),\\n      \\\"\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Cast a vote for a proposal with a reason\\n   * @param proposalId The id of the proposal to vote on\\n   * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n   * @param reason The reason given for the vote by the voter\\n   */\\n  function castVoteWithReason(\\n    uint256 proposalId,\\n    uint8 support,\\n    string calldata reason\\n  ) external override {\\n    emit VoteCast(\\n      msg.sender,\\n      proposalId,\\n      support,\\n      castVoteInternal(msg.sender, proposalId, support),\\n      reason\\n    );\\n  }\\n\\n  /**\\n   * @notice Cast a vote for a proposal by signature\\n   * @dev External function that accepts EIP-712 signatures for voting on proposals.\\n   */\\n  function castVoteBySig(\\n    uint256 proposalId,\\n    uint8 support,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    bytes32 domainSeparator =\\n      keccak256(\\n        abi.encode(\\n          DOMAIN_TYPEHASH,\\n          keccak256(bytes(NAME)),\\n          getChainIdInternal(),\\n          address(this)\\n        )\\n      );\\n    bytes32 structHash =\\n      keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n    bytes32 digest =\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(\\n      signatory != address(0),\\n      \\\"GovernorBravo::castVoteBySig: invalid signature\\\"\\n    );\\n    emit VoteCast(\\n      signatory,\\n      proposalId,\\n      support,\\n      castVoteInternal(signatory, proposalId, support),\\n      \\\"\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Internal function that caries out voting logic\\n   * @param voter The voter that is casting their vote\\n   * @param proposalId The id of the proposal to vote on\\n   * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n   * @return The number of votes cast\\n   */\\n  function castVoteInternal(\\n    address voter,\\n    uint256 proposalId,\\n    uint8 support\\n  ) internal returns (uint96) {\\n    require(\\n      state(proposalId) == ProposalState.Active,\\n      \\\"GovernorBravo::castVoteInternal: voting is closed\\\"\\n    );\\n    require(support <= 2, \\\"GovernorBravo::castVoteInternal: invalid vote type\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    Receipt storage receipt = proposal.receipts[voter];\\n    require(\\n      receipt.hasVoted == false,\\n      \\\"GovernorBravo::castVoteInternal: voter already voted\\\"\\n    );\\n    uint96 votes =\\n      IERC20Snapshot(token).balanceOfAt(voter, proposal.snapshotId);\\n\\n    if (support == 0) {\\n      proposal.againstVotes = add256(proposal.againstVotes, votes);\\n    } else if (support == 1) {\\n      proposal.forVotes = add256(proposal.forVotes, votes);\\n    } else if (support == 2) {\\n      proposal.abstainVotes = add256(proposal.abstainVotes, votes);\\n    }\\n\\n    receipt.hasVoted = true;\\n    receipt.support = support;\\n    receipt.votes = votes;\\n\\n    return votes;\\n  }\\n\\n  /**\\n   * @notice Admin function for setting the voting delay\\n   * @param newVotingDelay new voting delay, in blocks\\n   */\\n  function _setVotingDelay(uint256 newVotingDelay) external {\\n    require(msg.sender == admin, \\\"GovernorBravo::_setVotingDelay: admin only\\\");\\n    require(\\n      newVotingDelay >= MIN_VOTING_DELAY && newVotingDelay <= MAX_VOTING_DELAY,\\n      \\\"GovernorBravo::_setVotingDelay: invalid voting delay\\\"\\n    );\\n    uint256 oldVotingDelay = votingDelay;\\n    votingDelay = newVotingDelay;\\n\\n    emit VotingDelaySet(oldVotingDelay, votingDelay);\\n  }\\n\\n  /**\\n   * @notice Admin function for setting the voting period\\n   * @param newVotingPeriod new voting period, in blocks\\n   */\\n  function _setVotingPeriod(uint256 newVotingPeriod) external {\\n    require(msg.sender == admin, \\\"GovernorBravo::_setVotingPeriod: admin only\\\");\\n    require(\\n      newVotingPeriod >= MIN_VOTING_PERIOD &&\\n        newVotingPeriod <= MAX_VOTING_PERIOD,\\n      \\\"GovernorBravo::_setVotingPeriod: invalid voting period\\\"\\n    );\\n    uint256 oldVotingPeriod = votingPeriod;\\n    votingPeriod = newVotingPeriod;\\n\\n    emit VotingPeriodSet(oldVotingPeriod, votingPeriod);\\n  }\\n\\n  /**\\n   * @notice Admin function for setting the proposal threshold\\n   * @dev newProposalThreshold must be greater than the hardcoded min\\n   * @param newProposalThreshold new proposal threshold\\n   */\\n  function _setProposalThreshold(uint256 newProposalThreshold) external {\\n    require(\\n      msg.sender == admin,\\n      \\\"GovernorBravo::_setProposalThreshold: admin only\\\"\\n    );\\n    require(\\n      newProposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\\n        newProposalThreshold <= MAX_PROPOSAL_THRESHOLD,\\n      \\\"GovernorBravo::_setProposalThreshold: invalid proposal threshold\\\"\\n    );\\n    uint256 oldProposalThreshold = proposalThreshold;\\n    proposalThreshold = newProposalThreshold;\\n\\n    emit ProposalThresholdSet(oldProposalThreshold, proposalThreshold);\\n  }\\n\\n  /**\\n   * @notice Admin function for setting the proposal threshold\\n   * @dev newQuorumVotes must be greater than the hardcoded min\\n   * @param newQuorumVotes new quorum votes\\n   */\\n  function _setQuorumVotes(uint256 newQuorumVotes) external {\\n    require(msg.sender == admin, \\\"GovernorBravo::_setQuorumVotes: admin only\\\");\\n    require(\\n      newQuorumVotes >= MIN_QUORUM_VOTES && newQuorumVotes <= MAX_QUORUM_VOTES,\\n      \\\"GovernorBravo::_setQuorumVotes: invalid quorum\\\"\\n    );\\n    uint256 oldQuorumVotes = quorumVotes;\\n    quorumVotes = newQuorumVotes;\\n    emit QuorumVotesSet(oldQuorumVotes, newQuorumVotes);\\n  }\\n\\n  // /**\\n  //   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n  //   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n  //   * @param newPendingAdmin New pending admin.\\n  //   */\\n  // function _setPendingAdmin(address newPendingAdmin) external {\\n  //     // Check caller = admin\\n  //     require(msg.sender == admin, \\\"GovernorBravo:_setPendingAdmin: admin only\\\");\\n\\n  //     // Save current value, if any, for inclusion in log\\n  //     address oldPendingAdmin = pendingAdmin;\\n\\n  //     // Store pendingAdmin with value newPendingAdmin\\n  //     pendingAdmin = newPendingAdmin;\\n\\n  //     // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n  //     emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n  // }\\n\\n  // /**\\n  //   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n  //   * @dev Admin function for pending admin to accept role and update admin\\n  //   */\\n  // function _acceptAdmin() external {\\n  //     // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n  //     require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"GovernorBravo:_acceptAdmin: pending admin only\\\");\\n\\n  //     // Save current values for inclusion in log\\n  //     address oldAdmin = admin;\\n  //     address oldPendingAdmin = pendingAdmin;\\n\\n  //     // Store admin with value pendingAdmin\\n  //     admin = pendingAdmin;\\n\\n  //     // Clear the pending value\\n  //     pendingAdmin = address(0);\\n\\n  //     emit NewAdmin(oldAdmin, admin);\\n  //     emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n  // }\\n\\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"addition overflow\\\");\\n    return c;\\n  }\\n\\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"subtraction underflow\\\");\\n    return a - b;\\n  }\\n\\n  function getChainIdInternal() internal pure returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0xb1da0b890754cfb646de9c716172d556650ca7b240951823ce03fb6311086261\"},\"contracts/interfaces/IERC20Snapshot.sol\":{\"content\":\"interface IERC20Snapshot {\\n  function balanceOfAt(address account, uint256 blockNumber)\\n    external\\n    view\\n    returns (uint96);\\n\\n  function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\\n\\n  function snapshot() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x371005513efd9ce0e2c151c6dd52b2d4a05d8b25cc64c708d2f2f5db45c2cf19\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"interface IGnosisSafe {\\n  enum Operation {Call, DelegateCall}\\n\\n  function approveHash(bytes32 hashToApprove) external;\\n\\n  /**\\n   */\\n  function execTransaction(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    Operation operation,\\n    uint256 safeTxGas,\\n    uint256 baseGas,\\n    uint256 gasPrice,\\n    address gasToken,\\n    address payable refundReceiver,\\n    bytes calldata signatures\\n  ) external payable returns (bool success);\\n\\n  function nonce() external returns (uint256 _nonce);\\n\\n  function getTransactionHash(\\n    address to,\\n    uint256 value,\\n    bytes memory data,\\n    Operation operation,\\n    uint256 safeTxGas,\\n    uint256 baseGas,\\n    uint256 gasPrice,\\n    address gasToken,\\n    address refundReceiver,\\n    uint256 _nonce\\n  ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4f362896386d6bb0588849f19a48c239c4dddf6e520d74b9207facf6383c1eaf\"},\"contracts/interfaces/IGovernorBravoDecisionEngine.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IGnosisSafe.sol\\\";\\nimport \\\"../interfaces/IMiniMetoken.sol\\\";\\nimport \\\"../interfaces/IERC20Snapshot.sol\\\";\\n\\n// import \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\\\";\\n\\n/*** This interface is based on the GovernorBravo interface\\n\\n\\n */\\ninterface IGovernorBravoDecisionEngine {\\n  enum TokenType {Minime, ERC20Snapshot}\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 id,\\n    address proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 startBlock,\\n    uint256 endBlock,\\n    string description,\\n    uint256 snapshotId\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  /// @param voter The address which casted a vote\\n  /// @param proposalId The proposal id which was voted on\\n  /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\n  /// @param votes Number of votes which were cast by the voter\\n  /// @param reason The reason given for the vote by the voter\\n  event VoteCast(\\n    address indexed voter,\\n    uint256 proposalId,\\n    uint8 support,\\n    uint256 votes,\\n    string reason\\n  );\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint256 id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint256 id, uint256 eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint256 id);\\n\\n  /// @notice An event emitted when the voting delay is set\\n  event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n\\n  /// @notice An event emitted when the voting period is set\\n  event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n  /// @notice An event emitted when the voting period is set\\n  event QuorumVotesSet(uint256 oldQuorumVotes, uint256 newQuorumVotes);\\n\\n  /// @notice Emitted when implementation is changed\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /// @notice Emitted when proposal threshold is set\\n  event ProposalThresholdSet(\\n    uint256 oldProposalThreshold,\\n    uint256 newProposalThreshold\\n  );\\n\\n  /// @notice Emitted when pendingAdmin is changed\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n  struct Proposal {\\n    // @notice Unique id for looking up a proposal\\n    uint256 id;\\n    // @notice Creator of the proposal\\n    address proposer;\\n    // @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n    uint256 eta;\\n    // @notice the ordered list of target addresses for calls to be made\\n    address[] targets;\\n    // @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    uint256[] values;\\n    // @notice The ordered list of function signatures to be called\\n    string[] signatures;\\n    // @notice The ordered list of calldata to be passed to each call\\n    bytes[] calldatas;\\n    // @notice The block at which voting begins: holders must delegate their votes prior to this block\\n    uint256 startBlock;\\n    // @notice The block at which voting ends: votes must be cast prior to this block\\n    uint256 endBlock;\\n    // @notice Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // @notice Current number of votes in oppositioggn to this proposal\\n    uint256 againstVotes;\\n    // @notice Current number of votes for abstaining for this proposal\\n    uint256 abstainVotes;\\n    // @notice Flag marking whether the proposal has been canceled\\n    bool canceled;\\n    // @notice Flag marking whether the proposal has been executed\\n    bool executed;\\n    // @notice Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n    uint256 snapshotId;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    // @notice Whether or not a vote has been cast\\n    bool hasVoted;\\n    // @notice Whether or not the voter supports the proposal or abstains\\n    uint8 support;\\n    // @notice The number of votes the voter had, which were cast\\n    uint96 votes;\\n  }\\n\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState {\\n    Pending,\\n    Active,\\n    Canceled,\\n    Defeated,\\n    Succeeded,\\n    Queued,\\n    Expired,\\n    Executed\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) external returns (uint256);\\n\\n  function castVote(uint256 proposalId, uint8 support) external;\\n\\n  function castVoteWithReason(\\n    uint256 proposalId,\\n    uint8 support,\\n    string calldata reason\\n  ) external;\\n\\n  function castVoteBySig(\\n    uint256 proposalId,\\n    uint8 support,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function queue(uint256 proposalId) external;\\n\\n  function execute(uint256 proposalId) external;\\n\\n  function getActions(uint256 proposalId)\\n    external\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      bytes[] memory calldatas\\n    );\\n\\n  function getReceipt(uint256 proposalId, address voter)\\n    external\\n    returns (Receipt memory);\\n}\\n\",\"keccak256\":\"0x1e749b09a410f56032ce4dd1317c0f52418fb6ffec5d481ae1abbc9e8cf9c55e\"},\"contracts/interfaces/IMiniMetoken.sol\":{\"content\":\"// https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol\\ninterface IMiniMetoken {\\n  function balanceOfAt(address account, uint256 blockNumber)\\n    external\\n    view\\n    returns (uint96);\\n\\n  function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb9155acdfa027969396dbf4c8d851817c749af4a4045bd0fe554c5ae83e2a73b\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e2e80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c8063791f5d2311610146578063da95691a116100c3578063e48083fe11610087578063e48083fe146106fe578063f4e102681461071c578063f851a4401461073a578063fc0c546a14610758578063fc4eee4214610776578063fe0d94c11461079457610253565b8063da95691a14610646578063ddf0b00914610676578063deaaa7cc14610692578063e1d84514146106b0578063e23a9a52146106ce57610253565b8063a64e024a1161010a578063a64e024a146105b2578063b1126263146105d0578063b58131b0146105ee578063cd83f1d11461060c578063da35c6641461062857610253565b8063791f5d23146105205780637b3c71d31461053e5780637bdbe4d01461055a57806386d37e8b14610578578063a3f4df7e1461059457610253565b806325fd935a116101d45780633bccf4fd116101985780633bccf4fd146104685780633e4f49e6146104845780634178b249146104b457806356781388146104e65780636979c9511461050257610253565b806325fd935a146103ac5780632c5c5e87146103ca57806330fa738c146103fa578063328dd982146104185780633932abb11461044a57610253565b8063186f03541161021b578063186f0354146103185780631dfb1b5a1461033657806320606b7014610352578063215809ca1461037057806324bc1a641461038e57610253565b8063013cf08b1461025857806302a251a3146102925780630ea2d98c146102b057806317977c61146102cc57806317ba1b8b146102fc575b600080fd5b610272600480360381019061026d919061367a565b6107b0565b6040516102899b9a99989796959493929190615666565b60405180910390f35b61029a610844565b6040516102a7919061558c565b60405180910390f35b6102ca60048036038101906102c5919061367a565b61084a565b005b6102e660048036038101906102e1919061345e565b61097a565b6040516102f3919061558c565b60405180910390f35b6103166004803603810190610311919061367a565b610992565b005b610320610aca565b60405161032d91906150be565b60405180910390f35b610350600480360381019061034b919061367a565b610af0565b005b61035a610c1f565b6040516103679190614fe2565b60405180910390f35b610378610c43565b604051610385919061558c565b60405180910390f35b610396610c48565b6040516103a3919061558c565b60405180910390f35b6103b4610c4e565b6040516103c1919061558c565b60405180910390f35b6103e460048036038101906103df9190613708565b610c5d565b6040516103f1919061558c565b60405180910390f35b610402610cfc565b60405161040f91906150f4565b60405180910390f35b610432600480360381019061042d919061367a565b610d0f565b60405161044193929190614f5f565b60405180910390f35b610452610f02565b60405161045f919061558c565b60405180910390f35b610482600480360381019061047d91906137ec565b610f08565b005b61049e6004803603810190610499919061367a565b611142565b6040516104ab91906150d9565b60405180910390f35b6104ce60048036038101906104c991906136cc565b61131e565b6040516104dd93929190614fab565b60405180910390f35b61050060048036038101906104fb9190613744565b611387565b005b61050a6113e7565b604051610517919061558c565b60405180910390f35b6105286113ec565b604051610535919061558c565b60405180910390f35b61055860048036038101906105539190613780565b6113f1565b005b610562611457565b60405161056f919061558c565b60405180910390f35b610592600480360381019061058d919061367a565b61145c565b005b61059c611588565b6040516105a9919061510f565b60405180910390f35b6105ba6115c1565b6040516105c7919061558c565b60405180910390f35b6105d86115c8565b6040516105e5919061558c565b60405180910390f35b6105f66115ce565b604051610603919061558c565b60405180910390f35b61062660048036038101906106219190613487565b6115d4565b005b6106306119ac565b60405161063d919061558c565b60405180910390f35b610660600480360381019061065b9190613539565b6119b2565b60405161066d919061558c565b60405180910390f35b610690600480360381019061068b919061367a565b6120ab565b005b61069a612406565b6040516106a79190614fe2565b60405180910390f35b6106b861242a565b6040516106c5919061558c565b60405180910390f35b6106e860048036038101906106e391906136cc565b612436565b6040516106f59190615571565b60405180910390f35b610706612516565b604051610713919061558c565b60405180910390f35b61072461251b565b604051610731919061558c565b60405180910390f35b610742612520565b60405161074f9190614da5565b60405180910390f35b610760612546565b60405161076d9190614da5565b60405180910390f35b61077e61256c565b60405161078b919061558c565b60405180910390f35b6107ae60048036038101906107a9919061367a565b612572565b005b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600701549080600801549080600901549080600a01549080600b01549080600c0160009054906101000a900460ff169080600c0160019054906101000a900460ff169080600e015490508b565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190615171565b60405180910390fd5b600a81101580156108ee575062013b008111155b61092d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610924906151f1565b60405180910390fd5b60006006549050816006819055507f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e88288160065460405161096e929190615711565b60405180910390a15050565b600b6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a19906154f1565b60405180910390fd5b60008110158015610a3e5750670de0b6b3a76400006064028111155b610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490615351565b60405180910390fd5b60006007549050816007819055507fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc0546181600754604051610abe929190615711565b60405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790615191565b60405180910390fd5b60018110158015610b935750619d808111155b610bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc990615291565b60405180910390fd5b60006005549050816005819055507fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a9381600554604051610c13929190615711565b60405180910390a15050565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b600a81565b60085481565b670de0b6b3a764000060640281565b600080821415610c705760009050610cf6565b81831115610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa906151b1565b60405180910390fd5b610cf36064610ce584610cd7670de0b6b3a76400008861285a90919063ffffffff16565b6128ca90919063ffffffff16565b61285a90919063ffffffff16565b90505b92915050565b600360149054906101000a900460ff1681565b6060806060600060046000868152602001908152602001600020905080600301816004018260060182805480602002602001604051908101604052809291908181526020018280548015610db857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d6e575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610e0a57602002820191906000526020600020905b815481526020019060010190808311610df6575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610eee578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eda5780601f10610eaf57610100808354040283529160200191610eda565b820191906000526020600020905b815481529060010190602001808311610ebd57829003601f168201915b505050505081526020019060010190610e32565b505050509050935093509350509193909250565b60055481565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666040518060400160405280601481526020017f4c65676f204465636973696f6e20456e67696e6500000000000000000000000081525080519060200120610f70612920565b30604051602001610f849493929190614ffd565b60405160208183030381529060405280519060200120905060007f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f8787604051602001610fd393929190615042565b60405160208183030381529060405280519060200120905060008282604051602001611000929190614d6e565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161103d9493929190615079565b6020604051602081039080840390855afa15801561105f573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2906152f1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48a8a611120858e8e61292d565b60405161112f93929190615788565b60405180910390a2505050505050505050565b600081600a54101580156111565750600082115b611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118c90615271565b60405180910390fd5b600060046000848152602001908152602001600020905080600c0160009054906101000a900460ff16156111cd576002915050611319565b806007015443116111e2576000915050611319565b806008015443116111f7576001915050611319565b6008546112b68260090154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d085600e01546040518263ffffffff1660e01b8152600401611261919061558c565b60206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b191906136a3565b610c5d565b10156112c6576003915050611319565b6000816002015414156112dd576004915050611319565b80600c0160019054906101000a900460ff16156112fe576007915050611319565b80600201544210611313576006915050611319565b60059150505b919050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a90046bffffffffffffffffffffffff16905083565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda483836113cc33878761292d565b6040516113db93929190615788565b60405180910390a25050565b606481565b600081565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4858561143633898961292d565b868660405161144995949392919061573a565b60405180910390a250505050565b600a81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e390615411565b60405180910390fd5b600081101580156114fe575060648111155b61153d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153490615511565b60405180910390fd5b60006008549050816008819055507fffff0a251408cb8f05a4fc2ab0bdffe28e1519cb8ee5bdb6531e5d6ca51aaf75818360405161157c929190615711565b60405180910390a15050565b6040518060400160405280601481526020017f4c65676f204465636973696f6e20456e67696e6500000000000000000000000081525081565b62013b0081565b619d8081565b60075481565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165c90615151565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc906154d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90615211565b60405180910390fd5b600a8410158015611759575062013b008411155b611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178f90615531565b60405180910390fd5b600183101580156117ab5750619d808311155b6117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190615311565b60405180910390fd5b600082101580156118065750670de0b6b3a76400006064028211155b611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c906152b1565b60405180910390fd5b600081101580156118615750670de0b6b3a76400006064028111155b6118a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189790615491565b60405180910390fd5b87600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600360146101000a81548160ff0219169083600181111561194057fe5b021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836006819055508260058190555081600781905550806008819055505050505050505050565b600a5481565b6000806119ca60055443612c5790919063ffffffff16565b905060006119e360065483612c5790919063ffffffff16565b905060008060018111156119f357fe5b600360149054906101000a900460ff166001811115611a0e57fe5b1415611a1f57600143039050611af2565b600180811115611a2b57fe5b600360149054906101000a900460ff166001811115611a4657fe5b1415611af157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639711715a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee91906136a3565b90505b5b600754611c63600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e33856040518363ffffffff1660e01b8152600401611b55929190614dc0565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190613863565b6bffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0856040518263ffffffff1660e01b8152600401611c0e919061558c565b60206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e91906136a3565b610c5d565b11611ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9a906154b1565b60405180910390fd5b87518951148015611cb5575085518951145b611cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ceb90615331565b60405180910390fd5b600089511415611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d30906153f1565b60405180910390fd5b600a89511115611d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7590615431565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114611e8d576000611dd582611142565b905060016007811115611de457fe5b816007811115611df057fe5b1415611e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2890615471565b60405180910390fd5b60006007811115611e3e57fe5b816007811115611e4a57fe5b1415611e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8290615451565b60405180910390fd5b505b600a60008154809291906001019190505550600060046000600a5481526020019081526020016000209050600a548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600081600201819055508a816003019080519060200190611f28929190612d01565b5089816004019080519060200190611f41929190612d8b565b5088816005019080519060200190611f5a929190612dd8565b5087816006019080519060200190611f73929190612e38565b5084816007018190555083816008018190555060008160090181905550600081600a0181905550600081600c0160006101000a81548160ff021916908315150217905550600081600c0160016101000a81548160ff0219169083151502179055508281600e01819055508060000154600b60008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb822896d940636d634030a124c95006ad3a3008e5734f511df0d5c418b20c9d08160000154338d8d8d8d8b8b8f8c60405161208e9a999897969594939291906155a7565b60405180910390a180600001549550505050505095945050505050565b600460078111156120b857fe5b6120c182611142565b60078111156120cc57fe5b1461210c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210390615551565b60405180910390fd5b60006004600083815260200190815260200160002090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c791906136a3565b905060005b82600301805490508110156124005760608360050182815481106121ec57fe5b906000526020600020016040516122039190614d57565b604051809103902084600601838154811061221a57fe5b90600052602060002001604051602001612235929190614d2f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8d11f7886600301858154811061229557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760040186815481106122cf57fe5b9060005260206000200154856000806000806000808e6040518b63ffffffff1660e01b815260040161230a9a99989796959493929190614ebc565b60206040518083038186803b15801561232257600080fd5b505afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a9190613651565b90508380600101945050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d9bdcd826040518263ffffffff1660e01b81526004016123bf9190614fe2565b600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b50505050505080806001019150506121cc565b50505050565b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b670de0b6b3a764000081565b61243e612e98565b60008084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050905092915050565b600181565b600081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b6004600781111561257f57fe5b61258882611142565b600781111561259357fe5b146125d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ca90615371565b60405180910390fd5b6000600460008381526020019081526020016000209050600181600c0160016101000a81548160ff0219169083151502179055506060600060a01b306000801b60016040516020016126289493929190614ce1565b604051602081830303815290604052905060005b826003018054905081101561281d57606083600501828154811061265c57fe5b906000526020600020016040516126739190614d57565b604051809103902084600601838154811061268a57fe5b906000526020600020016040516020016126a5929190614d2f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a76120286600301858154811061270557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600401868154811061273f57fe5b9060005260206000200154856000806000806000808e6040518b63ffffffff1660e01b815260040161277a9a99989796959493929190614e12565b602060405180830381600087803b15801561279457600080fd5b505af11580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc9190613628565b90508061280e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280590615391565b60405180910390fd5b5050808060010191505061263c565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f8360405161284d919061558c565b60405180910390a1505050565b60008083141561286d57600090506128c4565b600082840290508284828161287e57fe5b04146128bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b6906153d1565b60405180910390fd5b809150505b92915050565b600080821161290e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612905906152d1565b60405180910390fd5b81838161291757fe5b04905092915050565b6000804690508091505090565b60006001600781111561293c57fe5b61294584611142565b600781111561295057fe5b14612990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298790615231565b60405180910390fd5b60028260ff1611156129d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ce90615131565b60405180910390fd5b6000600460008581526020019081526020016000209050600081600d0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160000160009054906101000a900460ff16151514612a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8290615251565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8885600e01546040518363ffffffff1660e01b8152600401612aee929190614de9565b60206040518083038186803b158015612b0657600080fd5b505afa158015612b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3e9190613863565b905060008560ff161415612b7557612b6883600a0154826bffffffffffffffffffffffff16612cac565b83600a0181905550612bdd565b60018560ff161415612baa57612b9d8360090154826bffffffffffffffffffffffff16612cac565b8360090181905550612bdc565b60028560ff161415612bdb57612bd283600b0154826bffffffffffffffffffffffff16612cac565b83600b01819055505b5b5b60018260000160006101000a81548160ff021916908315150217905550848260000160016101000a81548160ff021916908360ff160217905550808260000160026101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508093505050509392505050565b600080828401905083811015612ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c99906151d1565b60405180910390fd5b8091505092915050565b600080828401905083811015612cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cee906153b1565b60405180910390fd5b8091505092915050565b828054828255906000526020600020908101928215612d7a579160200282015b82811115612d795782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612d21565b5b509050612d879190612ecc565b5090565b828054828255906000526020600020908101928215612dc7579160200282015b82811115612dc6578251825591602001919060010190612dab565b5b509050612dd49190612ecc565b5090565b828054828255906000526020600020908101928215612e27579160200282015b82811115612e26578251829080519060200190612e16929190612ee9565b5091602001919060010190612df8565b5b509050612e349190612f69565b5090565b828054828255906000526020600020908101928215612e87579160200282015b82811115612e86578251829080519060200190612e76929190612f8d565b5091602001919060010190612e58565b5b509050612e94919061300d565b5090565b6040518060600160405280600015158152602001600060ff16815260200160006bffffffffffffffffffffffff1681525090565b5b80821115612ee5576000816000905550600101612ecd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f2a57805160ff1916838001178555612f58565b82800160010185558215612f58579182015b82811115612f57578251825591602001919060010190612f3c565b5b509050612f659190612ecc565b5090565b5b80821115612f895760008181612f809190613031565b50600101612f6a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fce57805160ff1916838001178555612ffc565b82800160010185558215612ffc579182015b82811115612ffb578251825591602001919060010190612fe0565b5b5090506130099190612ecc565b5090565b5b8082111561302d57600081816130249190613079565b5060010161300e565b5090565b50805460018160011615610100020316600290046000825580601f106130575750613076565b601f0160209004906000526020600020908101906130759190612ecc565b5b50565b50805460018160011615610100020316600290046000825580601f1061309f57506130be565b601f0160209004906000526020600020908101906130bd9190612ecc565b5b50565b6000813590506130d081615d5e565b92915050565b600082601f8301126130e757600080fd5b81356130fa6130f582615803565b6157d2565b9150818183526020840193506020810190508385602084028201111561311f57600080fd5b60005b8381101561314f578161313588826130c1565b845260208401935060208301925050600181019050613122565b5050505092915050565b600082601f83011261316a57600080fd5b813561317d6131788261582f565b6157d2565b9150818183526020840193506020810190508360005b838110156131c357813586016131a98882613303565b845260208401935060208301925050600181019050613193565b5050505092915050565b600082601f8301126131de57600080fd5b81356131f16131ec8261585b565b6157d2565b9150818183526020840193506020810190508360005b83811015613237578135860161321d88826133b6565b845260208401935060208301925050600181019050613207565b5050505092915050565b600082601f83011261325257600080fd5b813561326561326082615887565b6157d2565b9150818183526020840193506020810190508385602084028201111561328a57600080fd5b60005b838110156132ba57816132a0888261340a565b84526020840193506020830192505060018101905061328d565b5050505092915050565b6000815190506132d381615d75565b92915050565b6000813590506132e881615d8c565b92915050565b6000815190506132fd81615d8c565b92915050565b600082601f83011261331457600080fd5b8135613327613322826158b3565b6157d2565b9150808252602083016020830185838301111561334357600080fd5b61334e838284615c5f565b50505092915050565b60008135905061336681615da3565b92915050565b60008083601f84011261337e57600080fd5b8235905067ffffffffffffffff81111561339757600080fd5b6020830191508360018202830111156133af57600080fd5b9250929050565b600082601f8301126133c757600080fd5b81356133da6133d5826158e3565b6157d2565b915080825260208301602083018583830111156133f657600080fd5b613401838284615c5f565b50505092915050565b60008135905061341981615db3565b92915050565b60008151905061342e81615db3565b92915050565b60008135905061344381615dca565b92915050565b60008151905061345881615de1565b92915050565b60006020828403121561347057600080fd5b600061347e848285016130c1565b91505092915050565b600080600080600080600080610100898b0312156134a457600080fd5b60006134b28b828c016130c1565b98505060206134c38b828c016130c1565b97505060406134d48b828c016130c1565b96505060606134e58b828c01613357565b95505060806134f68b828c0161340a565b94505060a06135078b828c0161340a565b93505060c06135188b828c0161340a565b92505060e06135298b828c0161340a565b9150509295985092959890939650565b600080600080600060a0868803121561355157600080fd5b600086013567ffffffffffffffff81111561356b57600080fd5b613577888289016130d6565b955050602086013567ffffffffffffffff81111561359457600080fd5b6135a088828901613241565b945050604086013567ffffffffffffffff8111156135bd57600080fd5b6135c9888289016131cd565b935050606086013567ffffffffffffffff8111156135e657600080fd5b6135f288828901613159565b925050608086013567ffffffffffffffff81111561360f57600080fd5b61361b888289016133b6565b9150509295509295909350565b60006020828403121561363a57600080fd5b6000613648848285016132c4565b91505092915050565b60006020828403121561366357600080fd5b6000613671848285016132ee565b91505092915050565b60006020828403121561368c57600080fd5b600061369a8482850161340a565b91505092915050565b6000602082840312156136b557600080fd5b60006136c38482850161341f565b91505092915050565b600080604083850312156136df57600080fd5b60006136ed8582860161340a565b92505060206136fe858286016130c1565b9150509250929050565b6000806040838503121561371b57600080fd5b60006137298582860161340a565b925050602061373a8582860161340a565b9150509250929050565b6000806040838503121561375757600080fd5b60006137658582860161340a565b925050602061377685828601613434565b9150509250929050565b6000806000806060858703121561379657600080fd5b60006137a48782880161340a565b94505060206137b587828801613434565b935050604085013567ffffffffffffffff8111156137d257600080fd5b6137de8782880161336c565b925092505092959194509250565b600080600080600060a0868803121561380457600080fd5b60006138128882890161340a565b955050602061382388828901613434565b945050604061383488828901613434565b9350506060613845888289016132d9565b9250506080613856888289016132d9565b9150509295509295909350565b60006020828403121561387557600080fd5b600061388384828501613449565b91505092915050565b60006138988383613902565b60208301905092915050565b60006138b08383613b4f565b905092915050565b60006138c48383613d55565b905092915050565b60006138d88383614c61565b60208301905092915050565b6138ed81615bab565b82525050565b6138fc81615aa3565b82525050565b61390b81615a91565b82525050565b61391a81615a91565b82525050565b61393161392c82615a91565b615ca1565b82525050565b60006139428261597d565b61394c81856159f3565b935061395783615913565b8060005b8381101561398857815161396f888261388c565b975061397a836159bf565b92505060018101905061395b565b5085935050505092915050565b60006139a082615988565b6139aa8185615a04565b9350836020820285016139bc85615923565b8060005b858110156139f857848403895281516139d985826138a4565b94506139e4836159cc565b925060208a019950506001810190506139c0565b50829750879550505050505092915050565b6000613a1582615993565b613a1f8185615a15565b935083602082028501613a3185615933565b8060005b85811015613a6d5784840389528151613a4e85826138b8565b9450613a59836159d9565b925060208a01995050600181019050613a35565b50829750879550505050505092915050565b6000613a8a8261599e565b613a948185615a26565b9350613a9f83615943565b8060005b83811015613ad0578151613ab788826138cc565b9750613ac2836159e6565b925050600181019050613aa3565b5085935050505092915050565b613ae681615ab5565b82525050565b613af581615ab5565b82525050565b613b0c613b0782615ac1565b615cb3565b82525050565b613b1b81615aed565b82525050565b613b32613b2d82615aed565b615cbd565b82525050565b613b49613b4482615af7565b615cc7565b82525050565b6000613b5a826159a9565b613b648185615a37565b9350613b74818560208601615c6e565b613b7d81615cf7565b840191505092915050565b6000613b93826159a9565b613b9d8185615a48565b9350613bad818560208601615c6e565b613bb681615cf7565b840191505092915050565b600081546001811660008114613bde5760018114613c0357613c47565b607f6002830416613bef8187615a59565b955060ff1983168652808601935050613c47565b60028204613c118187615a59565b9550613c1c85615968565b60005b82811015613c3e57815481890152600182019150602081019050613c1f565b82880195505050505b505092915050565b600081546001811660008114613c6c5760018114613c9157613cd5565b607f6002830416613c7d8187615a59565b955060ff1983168652808601935050613cd5565b60028204613c9f8187615a59565b9550613caa85615953565b60005b82811015613ccc57815481890152600182019150602081019050613cad565b82880195505050505b505092915050565b613ce681615bbd565b82525050565b613cf581615be1565b82525050565b613d0481615bf3565b82525050565b613d1381615c05565b82525050565b613d2281615c17565b82525050565b6000613d348385615a75565b9350613d41838584615c5f565b613d4a83615cf7565b840190509392505050565b6000613d60826159b4565b613d6a8185615a64565b9350613d7a818560208601615c6e565b613d8381615cf7565b840191505092915050565b6000613d99826159b4565b613da38185615a75565b9350613db3818560208601615c6e565b613dbc81615cf7565b840191505092915050565b6000613dd4603283615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20696e76616c696420766f7465207479706500000000000000000000000000006020830152604082019050919050565b6000613e3a603383615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a2063616e206f60008301527f6e6c7920696e697469616c697a65206f6e6365000000000000000000000000006020830152604082019050919050565b6000613ea0602b83615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e67506572696f643a60008301527f2061646d696e206f6e6c790000000000000000000000000000000000000000006020830152604082019050919050565b6000613f06602a83615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e6744656c61793a2060008301527f61646d696e206f6e6c79000000000000000000000000000000000000000000006020830152604082019050919050565b6000613f6c604283615a75565b91507f4465636973696f6e456e67696e653a766f74696e67506f7765723a2062616c6160008301527f6e6365206d757374206265206c657373207468616e20746f74616c42616c616e60208301527f63650000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613ff8600283615a86565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614038601b83615a75565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614078603683615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e67506572696f643a60008301527f20696e76616c696420766f74696e6720706572696f64000000000000000000006020830152604082019050919050565b60006140de603083615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420746f6b656e2061646472657373000000000000000000000000000000006020830152604082019050919050565b6000614144603183615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20766f74696e6720697320636c6f7365640000000000000000000000000000006020830152604082019050919050565b60006141aa603483615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20766f74657220616c726561647920766f7465640000000000000000000000006020830152604082019050919050565b6000614210602983615a75565b91507f476f7665726e6f72416c7068613a3a73746174653a20696e76616c696420707260008301527f6f706f73616c20696400000000000000000000000000000000000000000000006020830152604082019050919050565b6000614276603483615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e6744656c61793a2060008301527f696e76616c696420766f74696e672064656c61790000000000000000000000006020830152604082019050919050565b60006142dc603583615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642070726f706f73616c207468726573686f6c6400000000000000000000006020830152604082019050919050565b6000614342601a83615a75565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000614382602f83615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f746542795369673a20696e60008301527f76616c6964207369676e617475726500000000000000000000000000000000006020830152604082019050919050565b60006143e8602f83615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420766f74696e672064656c617900000000000000000000000000000000006020830152604082019050919050565b600061444e604483615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73616c60008301527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d60208301527f61746368000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006144da604083615a75565b91507f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c546872657360008301527f686f6c643a20696e76616c69642070726f706f73616c207468726573686f6c646020830152604082019050919050565b6000614540604883615a75565b91507f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60008301527f2063616e206f6e6c79206265206578656375746564206966206974206973205360208301527f75636365656465640000000000000000000000000000000000000000000000006040830152606082019050919050565b60006145cc602783615a75565b91507f457865637574696f6e206f66207472616e73616374696f6e206f6e207361666560008301527f206661696c6564000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614632601183615a75565b91507f6164646974696f6e206f766572666c6f770000000000000000000000000000006000830152602082019050919050565b6000614672602183615a75565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146d8602c83615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206d7573742070726f60008301527f7669646520616374696f6e7300000000000000000000000000000000000000006020830152604082019050919050565b600061473e602a83615a75565b91507f476f7665726e6f72427261766f3a3a5f73657451756f72756d566f7465733a2060008301527f61646d696e206f6e6c79000000000000000000000000000000000000000000006020830152604082019050919050565b60006147a4602883615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a20746f6f206d616e7960008301527f20616374696f6e730000000000000000000000000000000000000000000000006020830152604082019050919050565b600061480a605983615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560008301527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208301527f20616c72656164792070656e64696e672070726f706f73616c000000000000006040830152606082019050919050565b6000614896605883615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560008301527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208301527f20616c7265616479206163746976652070726f706f73616c00000000000000006040830152606082019050919050565b6000614922600083615a75565b9150600082019050919050565b600061493c602983615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642071756f72756d00000000000000000000000000000000000000000000006020830152604082019050919050565b60006149a2603f83615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73657260008301527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c64006020830152604082019050919050565b6000614a08602f83615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642073616665206164647265737300000000000000000000000000000000006020830152604082019050919050565b6000614a6e603083615a75565b91507f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c546872657360008301527f686f6c643a2061646d696e206f6e6c79000000000000000000000000000000006020830152604082019050919050565b6000614ad4602e83615a75565b91507f476f7665726e6f72427261766f3a3a5f73657451756f72756d566f7465733a2060008301527f696e76616c69642071756f72756d0000000000000000000000000000000000006020830152604082019050919050565b6000614b3a603083615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420766f74696e6720706572696f64000000000000000000000000000000006020830152604082019050919050565b6000614ba0604883615a75565b91507f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60008301527f2063616e206f6e6c7920626520617070726f766564206966206974206973205360208301527f75636365656465640000000000000000000000000000000000000000000000006040830152606082019050919050565b606082016000820151614c356000850182613add565b506020820151614c486020850182614c7f565b506040820151614c5b6040850182614cc3565b50505050565b614c6a81615b7c565b82525050565b614c7981615b7c565b82525050565b614c8881615b86565b82525050565b614c9781615b86565b82525050565b614cae614ca982615b86565b615ce3565b82525050565b614cbd81615c4d565b82525050565b614ccc81615b93565b82525050565b614cdb81615b93565b82525050565b6000614ced8287613afb565b600c82019150614cfd8286613920565b601482019150614d0d8285613b21565b602082019150614d1d8284614c9d565b60018201915081905095945050505050565b6000614d3b8285613b38565b600482019150614d4b8284613c4f565b91508190509392505050565b6000614d638284613bc1565b915081905092915050565b6000614d7982613feb565b9150614d858285613b21565b602082019150614d958284613b21565b6020820191508190509392505050565b6000602082019050614dba6000830184613911565b92915050565b6000604082019050614dd560008301856138e4565b614de26020830184614c70565b9392505050565b6000604082019050614dfe6000830185613911565b614e0b6020830184614c70565b9392505050565b600061014082019050614e28600083018d613911565b614e35602083018c614c70565b8181036040830152614e47818b613b88565b9050614e56606083018a613cec565b614e636080830189613d19565b614e7060a0830188613d19565b614e7d60c0830187613d19565b614e8a60e08301866138e4565b614e986101008301856138f3565b818103610120830152614eab8184613b88565b90509b9a5050505050505050505050565b600061014082019050614ed2600083018d613911565b614edf602083018c614c70565b8181036040830152614ef1818b613b88565b9050614f00606083018a613cec565b614f0d6080830189613d19565b614f1a60a0830188613d19565b614f2760c0830187613d19565b614f3460e08301866138e4565b614f426101008301856138e4565b614f50610120830184614c70565b9b9a5050505050505050505050565b60006060820190508181036000830152614f798186613937565b90508181036020830152614f8d8185613a7f565b90508181036040830152614fa18184613995565b9050949350505050565b6000606082019050614fc06000830186613aec565b614fcd6020830185614c8e565b614fda6040830184614cd2565b949350505050565b6000602082019050614ff76000830184613b12565b92915050565b60006080820190506150126000830187613b12565b61501f6020830186613b12565b61502c6040830185614c70565b6150396060830184613911565b95945050505050565b60006060820190506150576000830186613b12565b6150646020830185614c70565b6150716040830184614c8e565b949350505050565b600060808201905061508e6000830187613b12565b61509b6020830186614c8e565b6150a86040830185613b12565b6150b56060830184613b12565b95945050505050565b60006020820190506150d36000830184613cdd565b92915050565b60006020820190506150ee6000830184613cfb565b92915050565b60006020820190506151096000830184613d0a565b92915050565b600060208201905081810360008301526151298184613d8e565b905092915050565b6000602082019050818103600083015261514a81613dc7565b9050919050565b6000602082019050818103600083015261516a81613e2d565b9050919050565b6000602082019050818103600083015261518a81613e93565b9050919050565b600060208201905081810360008301526151aa81613ef9565b9050919050565b600060208201905081810360008301526151ca81613f5f565b9050919050565b600060208201905081810360008301526151ea8161402b565b9050919050565b6000602082019050818103600083015261520a8161406b565b9050919050565b6000602082019050818103600083015261522a816140d1565b9050919050565b6000602082019050818103600083015261524a81614137565b9050919050565b6000602082019050818103600083015261526a8161419d565b9050919050565b6000602082019050818103600083015261528a81614203565b9050919050565b600060208201905081810360008301526152aa81614269565b9050919050565b600060208201905081810360008301526152ca816142cf565b9050919050565b600060208201905081810360008301526152ea81614335565b9050919050565b6000602082019050818103600083015261530a81614375565b9050919050565b6000602082019050818103600083015261532a816143db565b9050919050565b6000602082019050818103600083015261534a81614441565b9050919050565b6000602082019050818103600083015261536a816144cd565b9050919050565b6000602082019050818103600083015261538a81614533565b9050919050565b600060208201905081810360008301526153aa816145bf565b9050919050565b600060208201905081810360008301526153ca81614625565b9050919050565b600060208201905081810360008301526153ea81614665565b9050919050565b6000602082019050818103600083015261540a816146cb565b9050919050565b6000602082019050818103600083015261542a81614731565b9050919050565b6000602082019050818103600083015261544a81614797565b9050919050565b6000602082019050818103600083015261546a816147fd565b9050919050565b6000602082019050818103600083015261548a81614889565b9050919050565b600060208201905081810360008301526154aa8161492f565b9050919050565b600060208201905081810360008301526154ca81614995565b9050919050565b600060208201905081810360008301526154ea816149fb565b9050919050565b6000602082019050818103600083015261550a81614a61565b9050919050565b6000602082019050818103600083015261552a81614ac7565b9050919050565b6000602082019050818103600083015261554a81614b2d565b9050919050565b6000602082019050818103600083015261556a81614b93565b9050919050565b60006060820190506155866000830184614c1f565b92915050565b60006020820190506155a16000830184614c70565b92915050565b6000610140820190506155bd600083018d614c70565b6155ca602083018c6138e4565b81810360408301526155dc818b613937565b905081810360608301526155f0818a613a7f565b905081810360808301526156048189613a0a565b905081810360a08301526156188188613995565b905061562760c0830187614c70565b61563460e0830186614c70565b8181036101008301526156478185613d8e565b9050615657610120830184614c70565b9b9a5050505050505050505050565b60006101608201905061567c600083018e614c70565b615689602083018d613911565b615696604083018c614c70565b6156a3606083018b614c70565b6156b0608083018a614c70565b6156bd60a0830189614c70565b6156ca60c0830188614c70565b6156d760e0830187614c70565b6156e5610100830186613aec565b6156f3610120830185613aec565b615701610140830184614c70565b9c9b505050505050505050505050565b60006040820190506157266000830185614c70565b6157336020830184614c70565b9392505050565b600060808201905061574f6000830188614c70565b61575c6020830187614c8e565b6157696040830186614cb4565b818103606083015261577c818486613d28565b90509695505050505050565b600060808201905061579d6000830186614c70565b6157aa6020830185614c8e565b6157b76040830184614cb4565b81810360608301526157c881614915565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156157f9576157f8615cf5565b5b8060405250919050565b600067ffffffffffffffff82111561581e5761581d615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561584a57615849615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561587657615875615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156158a2576158a1615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156158ce576158cd615cf5565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156158fe576158fd615cf5565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000615a9c82615b5c565b9050919050565b6000615aae82615b5c565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050615b3182615d22565b919050565b6000819050615b4482615d36565b919050565b6000819050615b5782615d4a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000615bb682615c29565b9050919050565b6000615bc882615bcf565b9050919050565b6000615bda82615b5c565b9050919050565b6000615bec82615b23565b9050919050565b6000615bfe82615b36565b9050919050565b6000615c1082615b49565b9050919050565b6000615c2282615b7c565b9050919050565b6000615c3482615c3b565b9050919050565b6000615c4682615b5c565b9050919050565b6000615c5882615b93565b9050919050565b82818337600083830152505050565b60005b83811015615c8c578082015181840152602081019050615c71565b83811115615c9b576000848401525b50505050565b6000615cac82615cd1565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000615cdc82615d15565b9050919050565b6000615cee82615d08565b9050919050565bfe5b6000601f19601f8301169050919050565b60008160f81b9050919050565b60008160601b9050919050565b60028110615d3357615d32615cf5565b5b50565b60088110615d4757615d46615cf5565b5b50565b60028110615d5b57615d5a615cf5565b5b50565b615d6781615a91565b8114615d7257600080fd5b50565b615d7e81615ab5565b8114615d8957600080fd5b50565b615d9581615aed565b8114615da057600080fd5b50565b60028110615db057600080fd5b50565b615dbc81615b7c565b8114615dc757600080fd5b50565b615dd381615b86565b8114615dde57600080fd5b50565b615dea81615b93565b8114615df557600080fd5b5056fea264697066735822122003c334bc5c00177fe2249eac9e151884ef3a1365b9e3538193e4b947993238d264736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c8063791f5d2311610146578063da95691a116100c3578063e48083fe11610087578063e48083fe146106fe578063f4e102681461071c578063f851a4401461073a578063fc0c546a14610758578063fc4eee4214610776578063fe0d94c11461079457610253565b8063da95691a14610646578063ddf0b00914610676578063deaaa7cc14610692578063e1d84514146106b0578063e23a9a52146106ce57610253565b8063a64e024a1161010a578063a64e024a146105b2578063b1126263146105d0578063b58131b0146105ee578063cd83f1d11461060c578063da35c6641461062857610253565b8063791f5d23146105205780637b3c71d31461053e5780637bdbe4d01461055a57806386d37e8b14610578578063a3f4df7e1461059457610253565b806325fd935a116101d45780633bccf4fd116101985780633bccf4fd146104685780633e4f49e6146104845780634178b249146104b457806356781388146104e65780636979c9511461050257610253565b806325fd935a146103ac5780632c5c5e87146103ca57806330fa738c146103fa578063328dd982146104185780633932abb11461044a57610253565b8063186f03541161021b578063186f0354146103185780631dfb1b5a1461033657806320606b7014610352578063215809ca1461037057806324bc1a641461038e57610253565b8063013cf08b1461025857806302a251a3146102925780630ea2d98c146102b057806317977c61146102cc57806317ba1b8b146102fc575b600080fd5b610272600480360381019061026d919061367a565b6107b0565b6040516102899b9a99989796959493929190615666565b60405180910390f35b61029a610844565b6040516102a7919061558c565b60405180910390f35b6102ca60048036038101906102c5919061367a565b61084a565b005b6102e660048036038101906102e1919061345e565b61097a565b6040516102f3919061558c565b60405180910390f35b6103166004803603810190610311919061367a565b610992565b005b610320610aca565b60405161032d91906150be565b60405180910390f35b610350600480360381019061034b919061367a565b610af0565b005b61035a610c1f565b6040516103679190614fe2565b60405180910390f35b610378610c43565b604051610385919061558c565b60405180910390f35b610396610c48565b6040516103a3919061558c565b60405180910390f35b6103b4610c4e565b6040516103c1919061558c565b60405180910390f35b6103e460048036038101906103df9190613708565b610c5d565b6040516103f1919061558c565b60405180910390f35b610402610cfc565b60405161040f91906150f4565b60405180910390f35b610432600480360381019061042d919061367a565b610d0f565b60405161044193929190614f5f565b60405180910390f35b610452610f02565b60405161045f919061558c565b60405180910390f35b610482600480360381019061047d91906137ec565b610f08565b005b61049e6004803603810190610499919061367a565b611142565b6040516104ab91906150d9565b60405180910390f35b6104ce60048036038101906104c991906136cc565b61131e565b6040516104dd93929190614fab565b60405180910390f35b61050060048036038101906104fb9190613744565b611387565b005b61050a6113e7565b604051610517919061558c565b60405180910390f35b6105286113ec565b604051610535919061558c565b60405180910390f35b61055860048036038101906105539190613780565b6113f1565b005b610562611457565b60405161056f919061558c565b60405180910390f35b610592600480360381019061058d919061367a565b61145c565b005b61059c611588565b6040516105a9919061510f565b60405180910390f35b6105ba6115c1565b6040516105c7919061558c565b60405180910390f35b6105d86115c8565b6040516105e5919061558c565b60405180910390f35b6105f66115ce565b604051610603919061558c565b60405180910390f35b61062660048036038101906106219190613487565b6115d4565b005b6106306119ac565b60405161063d919061558c565b60405180910390f35b610660600480360381019061065b9190613539565b6119b2565b60405161066d919061558c565b60405180910390f35b610690600480360381019061068b919061367a565b6120ab565b005b61069a612406565b6040516106a79190614fe2565b60405180910390f35b6106b861242a565b6040516106c5919061558c565b60405180910390f35b6106e860048036038101906106e391906136cc565b612436565b6040516106f59190615571565b60405180910390f35b610706612516565b604051610713919061558c565b60405180910390f35b61072461251b565b604051610731919061558c565b60405180910390f35b610742612520565b60405161074f9190614da5565b60405180910390f35b610760612546565b60405161076d9190614da5565b60405180910390f35b61077e61256c565b60405161078b919061558c565b60405180910390f35b6107ae60048036038101906107a9919061367a565b612572565b005b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600701549080600801549080600901549080600a01549080600b01549080600c0160009054906101000a900460ff169080600c0160019054906101000a900460ff169080600e015490508b565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190615171565b60405180910390fd5b600a81101580156108ee575062013b008111155b61092d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610924906151f1565b60405180910390fd5b60006006549050816006819055507f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e88288160065460405161096e929190615711565b60405180910390a15050565b600b6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a19906154f1565b60405180910390fd5b60008110158015610a3e5750670de0b6b3a76400006064028111155b610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490615351565b60405180910390fd5b60006007549050816007819055507fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc0546181600754604051610abe929190615711565b60405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790615191565b60405180910390fd5b60018110158015610b935750619d808111155b610bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc990615291565b60405180910390fd5b60006005549050816005819055507fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a9381600554604051610c13929190615711565b60405180910390a15050565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b600a81565b60085481565b670de0b6b3a764000060640281565b600080821415610c705760009050610cf6565b81831115610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa906151b1565b60405180910390fd5b610cf36064610ce584610cd7670de0b6b3a76400008861285a90919063ffffffff16565b6128ca90919063ffffffff16565b61285a90919063ffffffff16565b90505b92915050565b600360149054906101000a900460ff1681565b6060806060600060046000868152602001908152602001600020905080600301816004018260060182805480602002602001604051908101604052809291908181526020018280548015610db857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d6e575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610e0a57602002820191906000526020600020905b815481526020019060010190808311610df6575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610eee578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eda5780601f10610eaf57610100808354040283529160200191610eda565b820191906000526020600020905b815481529060010190602001808311610ebd57829003601f168201915b505050505081526020019060010190610e32565b505050509050935093509350509193909250565b60055481565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666040518060400160405280601481526020017f4c65676f204465636973696f6e20456e67696e6500000000000000000000000081525080519060200120610f70612920565b30604051602001610f849493929190614ffd565b60405160208183030381529060405280519060200120905060007f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f8787604051602001610fd393929190615042565b60405160208183030381529060405280519060200120905060008282604051602001611000929190614d6e565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161103d9493929190615079565b6020604051602081039080840390855afa15801561105f573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2906152f1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48a8a611120858e8e61292d565b60405161112f93929190615788565b60405180910390a2505050505050505050565b600081600a54101580156111565750600082115b611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118c90615271565b60405180910390fd5b600060046000848152602001908152602001600020905080600c0160009054906101000a900460ff16156111cd576002915050611319565b806007015443116111e2576000915050611319565b806008015443116111f7576001915050611319565b6008546112b68260090154600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d085600e01546040518263ffffffff1660e01b8152600401611261919061558c565b60206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b191906136a3565b610c5d565b10156112c6576003915050611319565b6000816002015414156112dd576004915050611319565b80600c0160019054906101000a900460ff16156112fe576007915050611319565b80600201544210611313576006915050611319565b60059150505b919050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a90046bffffffffffffffffffffffff16905083565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda483836113cc33878761292d565b6040516113db93929190615788565b60405180910390a25050565b606481565b600081565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4858561143633898961292d565b868660405161144995949392919061573a565b60405180910390a250505050565b600a81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e390615411565b60405180910390fd5b600081101580156114fe575060648111155b61153d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153490615511565b60405180910390fd5b60006008549050816008819055507fffff0a251408cb8f05a4fc2ab0bdffe28e1519cb8ee5bdb6531e5d6ca51aaf75818360405161157c929190615711565b60405180910390a15050565b6040518060400160405280601481526020017f4c65676f204465636973696f6e20456e67696e6500000000000000000000000081525081565b62013b0081565b619d8081565b60075481565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165c90615151565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc906154d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173c90615211565b60405180910390fd5b600a8410158015611759575062013b008411155b611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178f90615531565b60405180910390fd5b600183101580156117ab5750619d808311155b6117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190615311565b60405180910390fd5b600082101580156118065750670de0b6b3a76400006064028211155b611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c906152b1565b60405180910390fd5b600081101580156118615750670de0b6b3a76400006064028111155b6118a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189790615491565b60405180910390fd5b87600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600360146101000a81548160ff0219169083600181111561194057fe5b021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836006819055508260058190555081600781905550806008819055505050505050505050565b600a5481565b6000806119ca60055443612c5790919063ffffffff16565b905060006119e360065483612c5790919063ffffffff16565b905060008060018111156119f357fe5b600360149054906101000a900460ff166001811115611a0e57fe5b1415611a1f57600143039050611af2565b600180811115611a2b57fe5b600360149054906101000a900460ff166001811115611a4657fe5b1415611af157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639711715a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee91906136a3565b90505b5b600754611c63600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e33856040518363ffffffff1660e01b8152600401611b55929190614dc0565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190613863565b6bffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0856040518263ffffffff1660e01b8152600401611c0e919061558c565b60206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e91906136a3565b610c5d565b11611ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9a906154b1565b60405180910390fd5b87518951148015611cb5575085518951145b611cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ceb90615331565b60405180910390fd5b600089511415611d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d30906153f1565b60405180910390fd5b600a89511115611d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7590615431565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114611e8d576000611dd582611142565b905060016007811115611de457fe5b816007811115611df057fe5b1415611e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2890615471565b60405180910390fd5b60006007811115611e3e57fe5b816007811115611e4a57fe5b1415611e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8290615451565b60405180910390fd5b505b600a60008154809291906001019190505550600060046000600a5481526020019081526020016000209050600a548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600081600201819055508a816003019080519060200190611f28929190612d01565b5089816004019080519060200190611f41929190612d8b565b5088816005019080519060200190611f5a929190612dd8565b5087816006019080519060200190611f73929190612e38565b5084816007018190555083816008018190555060008160090181905550600081600a0181905550600081600c0160006101000a81548160ff021916908315150217905550600081600c0160016101000a81548160ff0219169083151502179055508281600e01819055508060000154600b60008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb822896d940636d634030a124c95006ad3a3008e5734f511df0d5c418b20c9d08160000154338d8d8d8d8b8b8f8c60405161208e9a999897969594939291906155a7565b60405180910390a180600001549550505050505095945050505050565b600460078111156120b857fe5b6120c182611142565b60078111156120cc57fe5b1461210c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210390615551565b60405180910390fd5b60006004600083815260200190815260200160002090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c791906136a3565b905060005b82600301805490508110156124005760608360050182815481106121ec57fe5b906000526020600020016040516122039190614d57565b604051809103902084600601838154811061221a57fe5b90600052602060002001604051602001612235929190614d2f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8d11f7886600301858154811061229557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760040186815481106122cf57fe5b9060005260206000200154856000806000806000808e6040518b63ffffffff1660e01b815260040161230a9a99989796959493929190614ebc565b60206040518083038186803b15801561232257600080fd5b505afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a9190613651565b90508380600101945050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4d9bdcd826040518263ffffffff1660e01b81526004016123bf9190614fe2565b600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b50505050505080806001019150506121cc565b50505050565b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b670de0b6b3a764000081565b61243e612e98565b60008084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050905092915050565b600181565b600081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b6004600781111561257f57fe5b61258882611142565b600781111561259357fe5b146125d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ca90615371565b60405180910390fd5b6000600460008381526020019081526020016000209050600181600c0160016101000a81548160ff0219169083151502179055506060600060a01b306000801b60016040516020016126289493929190614ce1565b604051602081830303815290604052905060005b826003018054905081101561281d57606083600501828154811061265c57fe5b906000526020600020016040516126739190614d57565b604051809103902084600601838154811061268a57fe5b906000526020600020016040516020016126a5929190614d2f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a76120286600301858154811061270557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600401868154811061273f57fe5b9060005260206000200154856000806000806000808e6040518b63ffffffff1660e01b815260040161277a9a99989796959493929190614e12565b602060405180830381600087803b15801561279457600080fd5b505af11580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc9190613628565b90508061280e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280590615391565b60405180910390fd5b5050808060010191505061263c565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f8360405161284d919061558c565b60405180910390a1505050565b60008083141561286d57600090506128c4565b600082840290508284828161287e57fe5b04146128bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b6906153d1565b60405180910390fd5b809150505b92915050565b600080821161290e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612905906152d1565b60405180910390fd5b81838161291757fe5b04905092915050565b6000804690508091505090565b60006001600781111561293c57fe5b61294584611142565b600781111561295057fe5b14612990576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298790615231565b60405180910390fd5b60028260ff1611156129d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ce90615131565b60405180910390fd5b6000600460008581526020019081526020016000209050600081600d0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160000160009054906101000a900460ff16151514612a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8290615251565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e8885600e01546040518363ffffffff1660e01b8152600401612aee929190614de9565b60206040518083038186803b158015612b0657600080fd5b505afa158015612b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3e9190613863565b905060008560ff161415612b7557612b6883600a0154826bffffffffffffffffffffffff16612cac565b83600a0181905550612bdd565b60018560ff161415612baa57612b9d8360090154826bffffffffffffffffffffffff16612cac565b8360090181905550612bdc565b60028560ff161415612bdb57612bd283600b0154826bffffffffffffffffffffffff16612cac565b83600b01819055505b5b5b60018260000160006101000a81548160ff021916908315150217905550848260000160016101000a81548160ff021916908360ff160217905550808260000160026101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508093505050509392505050565b600080828401905083811015612ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c99906151d1565b60405180910390fd5b8091505092915050565b600080828401905083811015612cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cee906153b1565b60405180910390fd5b8091505092915050565b828054828255906000526020600020908101928215612d7a579160200282015b82811115612d795782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612d21565b5b509050612d879190612ecc565b5090565b828054828255906000526020600020908101928215612dc7579160200282015b82811115612dc6578251825591602001919060010190612dab565b5b509050612dd49190612ecc565b5090565b828054828255906000526020600020908101928215612e27579160200282015b82811115612e26578251829080519060200190612e16929190612ee9565b5091602001919060010190612df8565b5b509050612e349190612f69565b5090565b828054828255906000526020600020908101928215612e87579160200282015b82811115612e86578251829080519060200190612e76929190612f8d565b5091602001919060010190612e58565b5b509050612e94919061300d565b5090565b6040518060600160405280600015158152602001600060ff16815260200160006bffffffffffffffffffffffff1681525090565b5b80821115612ee5576000816000905550600101612ecd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f2a57805160ff1916838001178555612f58565b82800160010185558215612f58579182015b82811115612f57578251825591602001919060010190612f3c565b5b509050612f659190612ecc565b5090565b5b80821115612f895760008181612f809190613031565b50600101612f6a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fce57805160ff1916838001178555612ffc565b82800160010185558215612ffc579182015b82811115612ffb578251825591602001919060010190612fe0565b5b5090506130099190612ecc565b5090565b5b8082111561302d57600081816130249190613079565b5060010161300e565b5090565b50805460018160011615610100020316600290046000825580601f106130575750613076565b601f0160209004906000526020600020908101906130759190612ecc565b5b50565b50805460018160011615610100020316600290046000825580601f1061309f57506130be565b601f0160209004906000526020600020908101906130bd9190612ecc565b5b50565b6000813590506130d081615d5e565b92915050565b600082601f8301126130e757600080fd5b81356130fa6130f582615803565b6157d2565b9150818183526020840193506020810190508385602084028201111561311f57600080fd5b60005b8381101561314f578161313588826130c1565b845260208401935060208301925050600181019050613122565b5050505092915050565b600082601f83011261316a57600080fd5b813561317d6131788261582f565b6157d2565b9150818183526020840193506020810190508360005b838110156131c357813586016131a98882613303565b845260208401935060208301925050600181019050613193565b5050505092915050565b600082601f8301126131de57600080fd5b81356131f16131ec8261585b565b6157d2565b9150818183526020840193506020810190508360005b83811015613237578135860161321d88826133b6565b845260208401935060208301925050600181019050613207565b5050505092915050565b600082601f83011261325257600080fd5b813561326561326082615887565b6157d2565b9150818183526020840193506020810190508385602084028201111561328a57600080fd5b60005b838110156132ba57816132a0888261340a565b84526020840193506020830192505060018101905061328d565b5050505092915050565b6000815190506132d381615d75565b92915050565b6000813590506132e881615d8c565b92915050565b6000815190506132fd81615d8c565b92915050565b600082601f83011261331457600080fd5b8135613327613322826158b3565b6157d2565b9150808252602083016020830185838301111561334357600080fd5b61334e838284615c5f565b50505092915050565b60008135905061336681615da3565b92915050565b60008083601f84011261337e57600080fd5b8235905067ffffffffffffffff81111561339757600080fd5b6020830191508360018202830111156133af57600080fd5b9250929050565b600082601f8301126133c757600080fd5b81356133da6133d5826158e3565b6157d2565b915080825260208301602083018583830111156133f657600080fd5b613401838284615c5f565b50505092915050565b60008135905061341981615db3565b92915050565b60008151905061342e81615db3565b92915050565b60008135905061344381615dca565b92915050565b60008151905061345881615de1565b92915050565b60006020828403121561347057600080fd5b600061347e848285016130c1565b91505092915050565b600080600080600080600080610100898b0312156134a457600080fd5b60006134b28b828c016130c1565b98505060206134c38b828c016130c1565b97505060406134d48b828c016130c1565b96505060606134e58b828c01613357565b95505060806134f68b828c0161340a565b94505060a06135078b828c0161340a565b93505060c06135188b828c0161340a565b92505060e06135298b828c0161340a565b9150509295985092959890939650565b600080600080600060a0868803121561355157600080fd5b600086013567ffffffffffffffff81111561356b57600080fd5b613577888289016130d6565b955050602086013567ffffffffffffffff81111561359457600080fd5b6135a088828901613241565b945050604086013567ffffffffffffffff8111156135bd57600080fd5b6135c9888289016131cd565b935050606086013567ffffffffffffffff8111156135e657600080fd5b6135f288828901613159565b925050608086013567ffffffffffffffff81111561360f57600080fd5b61361b888289016133b6565b9150509295509295909350565b60006020828403121561363a57600080fd5b6000613648848285016132c4565b91505092915050565b60006020828403121561366357600080fd5b6000613671848285016132ee565b91505092915050565b60006020828403121561368c57600080fd5b600061369a8482850161340a565b91505092915050565b6000602082840312156136b557600080fd5b60006136c38482850161341f565b91505092915050565b600080604083850312156136df57600080fd5b60006136ed8582860161340a565b92505060206136fe858286016130c1565b9150509250929050565b6000806040838503121561371b57600080fd5b60006137298582860161340a565b925050602061373a8582860161340a565b9150509250929050565b6000806040838503121561375757600080fd5b60006137658582860161340a565b925050602061377685828601613434565b9150509250929050565b6000806000806060858703121561379657600080fd5b60006137a48782880161340a565b94505060206137b587828801613434565b935050604085013567ffffffffffffffff8111156137d257600080fd5b6137de8782880161336c565b925092505092959194509250565b600080600080600060a0868803121561380457600080fd5b60006138128882890161340a565b955050602061382388828901613434565b945050604061383488828901613434565b9350506060613845888289016132d9565b9250506080613856888289016132d9565b9150509295509295909350565b60006020828403121561387557600080fd5b600061388384828501613449565b91505092915050565b60006138988383613902565b60208301905092915050565b60006138b08383613b4f565b905092915050565b60006138c48383613d55565b905092915050565b60006138d88383614c61565b60208301905092915050565b6138ed81615bab565b82525050565b6138fc81615aa3565b82525050565b61390b81615a91565b82525050565b61391a81615a91565b82525050565b61393161392c82615a91565b615ca1565b82525050565b60006139428261597d565b61394c81856159f3565b935061395783615913565b8060005b8381101561398857815161396f888261388c565b975061397a836159bf565b92505060018101905061395b565b5085935050505092915050565b60006139a082615988565b6139aa8185615a04565b9350836020820285016139bc85615923565b8060005b858110156139f857848403895281516139d985826138a4565b94506139e4836159cc565b925060208a019950506001810190506139c0565b50829750879550505050505092915050565b6000613a1582615993565b613a1f8185615a15565b935083602082028501613a3185615933565b8060005b85811015613a6d5784840389528151613a4e85826138b8565b9450613a59836159d9565b925060208a01995050600181019050613a35565b50829750879550505050505092915050565b6000613a8a8261599e565b613a948185615a26565b9350613a9f83615943565b8060005b83811015613ad0578151613ab788826138cc565b9750613ac2836159e6565b925050600181019050613aa3565b5085935050505092915050565b613ae681615ab5565b82525050565b613af581615ab5565b82525050565b613b0c613b0782615ac1565b615cb3565b82525050565b613b1b81615aed565b82525050565b613b32613b2d82615aed565b615cbd565b82525050565b613b49613b4482615af7565b615cc7565b82525050565b6000613b5a826159a9565b613b648185615a37565b9350613b74818560208601615c6e565b613b7d81615cf7565b840191505092915050565b6000613b93826159a9565b613b9d8185615a48565b9350613bad818560208601615c6e565b613bb681615cf7565b840191505092915050565b600081546001811660008114613bde5760018114613c0357613c47565b607f6002830416613bef8187615a59565b955060ff1983168652808601935050613c47565b60028204613c118187615a59565b9550613c1c85615968565b60005b82811015613c3e57815481890152600182019150602081019050613c1f565b82880195505050505b505092915050565b600081546001811660008114613c6c5760018114613c9157613cd5565b607f6002830416613c7d8187615a59565b955060ff1983168652808601935050613cd5565b60028204613c9f8187615a59565b9550613caa85615953565b60005b82811015613ccc57815481890152600182019150602081019050613cad565b82880195505050505b505092915050565b613ce681615bbd565b82525050565b613cf581615be1565b82525050565b613d0481615bf3565b82525050565b613d1381615c05565b82525050565b613d2281615c17565b82525050565b6000613d348385615a75565b9350613d41838584615c5f565b613d4a83615cf7565b840190509392505050565b6000613d60826159b4565b613d6a8185615a64565b9350613d7a818560208601615c6e565b613d8381615cf7565b840191505092915050565b6000613d99826159b4565b613da38185615a75565b9350613db3818560208601615c6e565b613dbc81615cf7565b840191505092915050565b6000613dd4603283615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20696e76616c696420766f7465207479706500000000000000000000000000006020830152604082019050919050565b6000613e3a603383615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a2063616e206f60008301527f6e6c7920696e697469616c697a65206f6e6365000000000000000000000000006020830152604082019050919050565b6000613ea0602b83615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e67506572696f643a60008301527f2061646d696e206f6e6c790000000000000000000000000000000000000000006020830152604082019050919050565b6000613f06602a83615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e6744656c61793a2060008301527f61646d696e206f6e6c79000000000000000000000000000000000000000000006020830152604082019050919050565b6000613f6c604283615a75565b91507f4465636973696f6e456e67696e653a766f74696e67506f7765723a2062616c6160008301527f6e6365206d757374206265206c657373207468616e20746f74616c42616c616e60208301527f63650000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613ff8600283615a86565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614038601b83615a75565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614078603683615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e67506572696f643a60008301527f20696e76616c696420766f74696e6720706572696f64000000000000000000006020830152604082019050919050565b60006140de603083615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420746f6b656e2061646472657373000000000000000000000000000000006020830152604082019050919050565b6000614144603183615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20766f74696e6720697320636c6f7365640000000000000000000000000000006020830152604082019050919050565b60006141aa603483615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60008301527f20766f74657220616c726561647920766f7465640000000000000000000000006020830152604082019050919050565b6000614210602983615a75565b91507f476f7665726e6f72416c7068613a3a73746174653a20696e76616c696420707260008301527f6f706f73616c20696400000000000000000000000000000000000000000000006020830152604082019050919050565b6000614276603483615a75565b91507f476f7665726e6f72427261766f3a3a5f736574566f74696e6744656c61793a2060008301527f696e76616c696420766f74696e672064656c61790000000000000000000000006020830152604082019050919050565b60006142dc603583615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642070726f706f73616c207468726573686f6c6400000000000000000000006020830152604082019050919050565b6000614342601a83615a75565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000614382602f83615a75565b91507f476f7665726e6f72427261766f3a3a63617374566f746542795369673a20696e60008301527f76616c6964207369676e617475726500000000000000000000000000000000006020830152604082019050919050565b60006143e8602f83615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420766f74696e672064656c617900000000000000000000000000000000006020830152604082019050919050565b600061444e604483615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73616c60008301527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d60208301527f61746368000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006144da604083615a75565b91507f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c546872657360008301527f686f6c643a20696e76616c69642070726f706f73616c207468726573686f6c646020830152604082019050919050565b6000614540604883615a75565b91507f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60008301527f2063616e206f6e6c79206265206578656375746564206966206974206973205360208301527f75636365656465640000000000000000000000000000000000000000000000006040830152606082019050919050565b60006145cc602783615a75565b91507f457865637574696f6e206f66207472616e73616374696f6e206f6e207361666560008301527f206661696c6564000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614632601183615a75565b91507f6164646974696f6e206f766572666c6f770000000000000000000000000000006000830152602082019050919050565b6000614672602183615a75565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146d8602c83615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206d7573742070726f60008301527f7669646520616374696f6e7300000000000000000000000000000000000000006020830152604082019050919050565b600061473e602a83615a75565b91507f476f7665726e6f72427261766f3a3a5f73657451756f72756d566f7465733a2060008301527f61646d696e206f6e6c79000000000000000000000000000000000000000000006020830152604082019050919050565b60006147a4602883615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a20746f6f206d616e7960008301527f20616374696f6e730000000000000000000000000000000000000000000000006020830152604082019050919050565b600061480a605983615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560008301527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208301527f20616c72656164792070656e64696e672070726f706f73616c000000000000006040830152606082019050919050565b6000614896605883615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560008301527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208301527f20616c7265616479206163746976652070726f706f73616c00000000000000006040830152606082019050919050565b6000614922600083615a75565b9150600082019050919050565b600061493c602983615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642071756f72756d00000000000000000000000000000000000000000000006020830152604082019050919050565b60006149a2603f83615a75565b91507f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73657260008301527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c64006020830152604082019050919050565b6000614a08602f83615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f69642073616665206164647265737300000000000000000000000000000000006020830152604082019050919050565b6000614a6e603083615a75565b91507f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c546872657360008301527f686f6c643a2061646d696e206f6e6c79000000000000000000000000000000006020830152604082019050919050565b6000614ad4602e83615a75565b91507f476f7665726e6f72427261766f3a3a5f73657451756f72756d566f7465733a2060008301527f696e76616c69642071756f72756d0000000000000000000000000000000000006020830152604082019050919050565b6000614b3a603083615a75565b91507f476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616c60008301527f696420766f74696e6720706572696f64000000000000000000000000000000006020830152604082019050919050565b6000614ba0604883615a75565b91507f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60008301527f2063616e206f6e6c7920626520617070726f766564206966206974206973205360208301527f75636365656465640000000000000000000000000000000000000000000000006040830152606082019050919050565b606082016000820151614c356000850182613add565b506020820151614c486020850182614c7f565b506040820151614c5b6040850182614cc3565b50505050565b614c6a81615b7c565b82525050565b614c7981615b7c565b82525050565b614c8881615b86565b82525050565b614c9781615b86565b82525050565b614cae614ca982615b86565b615ce3565b82525050565b614cbd81615c4d565b82525050565b614ccc81615b93565b82525050565b614cdb81615b93565b82525050565b6000614ced8287613afb565b600c82019150614cfd8286613920565b601482019150614d0d8285613b21565b602082019150614d1d8284614c9d565b60018201915081905095945050505050565b6000614d3b8285613b38565b600482019150614d4b8284613c4f565b91508190509392505050565b6000614d638284613bc1565b915081905092915050565b6000614d7982613feb565b9150614d858285613b21565b602082019150614d958284613b21565b6020820191508190509392505050565b6000602082019050614dba6000830184613911565b92915050565b6000604082019050614dd560008301856138e4565b614de26020830184614c70565b9392505050565b6000604082019050614dfe6000830185613911565b614e0b6020830184614c70565b9392505050565b600061014082019050614e28600083018d613911565b614e35602083018c614c70565b8181036040830152614e47818b613b88565b9050614e56606083018a613cec565b614e636080830189613d19565b614e7060a0830188613d19565b614e7d60c0830187613d19565b614e8a60e08301866138e4565b614e986101008301856138f3565b818103610120830152614eab8184613b88565b90509b9a5050505050505050505050565b600061014082019050614ed2600083018d613911565b614edf602083018c614c70565b8181036040830152614ef1818b613b88565b9050614f00606083018a613cec565b614f0d6080830189613d19565b614f1a60a0830188613d19565b614f2760c0830187613d19565b614f3460e08301866138e4565b614f426101008301856138e4565b614f50610120830184614c70565b9b9a5050505050505050505050565b60006060820190508181036000830152614f798186613937565b90508181036020830152614f8d8185613a7f565b90508181036040830152614fa18184613995565b9050949350505050565b6000606082019050614fc06000830186613aec565b614fcd6020830185614c8e565b614fda6040830184614cd2565b949350505050565b6000602082019050614ff76000830184613b12565b92915050565b60006080820190506150126000830187613b12565b61501f6020830186613b12565b61502c6040830185614c70565b6150396060830184613911565b95945050505050565b60006060820190506150576000830186613b12565b6150646020830185614c70565b6150716040830184614c8e565b949350505050565b600060808201905061508e6000830187613b12565b61509b6020830186614c8e565b6150a86040830185613b12565b6150b56060830184613b12565b95945050505050565b60006020820190506150d36000830184613cdd565b92915050565b60006020820190506150ee6000830184613cfb565b92915050565b60006020820190506151096000830184613d0a565b92915050565b600060208201905081810360008301526151298184613d8e565b905092915050565b6000602082019050818103600083015261514a81613dc7565b9050919050565b6000602082019050818103600083015261516a81613e2d565b9050919050565b6000602082019050818103600083015261518a81613e93565b9050919050565b600060208201905081810360008301526151aa81613ef9565b9050919050565b600060208201905081810360008301526151ca81613f5f565b9050919050565b600060208201905081810360008301526151ea8161402b565b9050919050565b6000602082019050818103600083015261520a8161406b565b9050919050565b6000602082019050818103600083015261522a816140d1565b9050919050565b6000602082019050818103600083015261524a81614137565b9050919050565b6000602082019050818103600083015261526a8161419d565b9050919050565b6000602082019050818103600083015261528a81614203565b9050919050565b600060208201905081810360008301526152aa81614269565b9050919050565b600060208201905081810360008301526152ca816142cf565b9050919050565b600060208201905081810360008301526152ea81614335565b9050919050565b6000602082019050818103600083015261530a81614375565b9050919050565b6000602082019050818103600083015261532a816143db565b9050919050565b6000602082019050818103600083015261534a81614441565b9050919050565b6000602082019050818103600083015261536a816144cd565b9050919050565b6000602082019050818103600083015261538a81614533565b9050919050565b600060208201905081810360008301526153aa816145bf565b9050919050565b600060208201905081810360008301526153ca81614625565b9050919050565b600060208201905081810360008301526153ea81614665565b9050919050565b6000602082019050818103600083015261540a816146cb565b9050919050565b6000602082019050818103600083015261542a81614731565b9050919050565b6000602082019050818103600083015261544a81614797565b9050919050565b6000602082019050818103600083015261546a816147fd565b9050919050565b6000602082019050818103600083015261548a81614889565b9050919050565b600060208201905081810360008301526154aa8161492f565b9050919050565b600060208201905081810360008301526154ca81614995565b9050919050565b600060208201905081810360008301526154ea816149fb565b9050919050565b6000602082019050818103600083015261550a81614a61565b9050919050565b6000602082019050818103600083015261552a81614ac7565b9050919050565b6000602082019050818103600083015261554a81614b2d565b9050919050565b6000602082019050818103600083015261556a81614b93565b9050919050565b60006060820190506155866000830184614c1f565b92915050565b60006020820190506155a16000830184614c70565b92915050565b6000610140820190506155bd600083018d614c70565b6155ca602083018c6138e4565b81810360408301526155dc818b613937565b905081810360608301526155f0818a613a7f565b905081810360808301526156048189613a0a565b905081810360a08301526156188188613995565b905061562760c0830187614c70565b61563460e0830186614c70565b8181036101008301526156478185613d8e565b9050615657610120830184614c70565b9b9a5050505050505050505050565b60006101608201905061567c600083018e614c70565b615689602083018d613911565b615696604083018c614c70565b6156a3606083018b614c70565b6156b0608083018a614c70565b6156bd60a0830189614c70565b6156ca60c0830188614c70565b6156d760e0830187614c70565b6156e5610100830186613aec565b6156f3610120830185613aec565b615701610140830184614c70565b9c9b505050505050505050505050565b60006040820190506157266000830185614c70565b6157336020830184614c70565b9392505050565b600060808201905061574f6000830188614c70565b61575c6020830187614c8e565b6157696040830186614cb4565b818103606083015261577c818486613d28565b90509695505050505050565b600060808201905061579d6000830186614c70565b6157aa6020830185614c8e565b6157b76040830184614cb4565b81810360608301526157c881614915565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156157f9576157f8615cf5565b5b8060405250919050565b600067ffffffffffffffff82111561581e5761581d615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561584a57615849615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561587657615875615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156158a2576158a1615cf5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156158ce576158cd615cf5565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156158fe576158fd615cf5565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000615a9c82615b5c565b9050919050565b6000615aae82615b5c565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffff000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050615b3182615d22565b919050565b6000819050615b4482615d36565b919050565b6000819050615b5782615d4a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000615bb682615c29565b9050919050565b6000615bc882615bcf565b9050919050565b6000615bda82615b5c565b9050919050565b6000615bec82615b23565b9050919050565b6000615bfe82615b36565b9050919050565b6000615c1082615b49565b9050919050565b6000615c2282615b7c565b9050919050565b6000615c3482615c3b565b9050919050565b6000615c4682615b5c565b9050919050565b6000615c5882615b93565b9050919050565b82818337600083830152505050565b60005b83811015615c8c578082015181840152602081019050615c71565b83811115615c9b576000848401525b50505050565b6000615cac82615cd1565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000615cdc82615d15565b9050919050565b6000615cee82615d08565b9050919050565bfe5b6000601f19601f8301169050919050565b60008160f81b9050919050565b60008160601b9050919050565b60028110615d3357615d32615cf5565b5b50565b60088110615d4757615d46615cf5565b5b50565b60028110615d5b57615d5a615cf5565b5b50565b615d6781615a91565b8114615d7257600080fd5b50565b615d7e81615ab5565b8114615d8957600080fd5b50565b615d9581615aed565b8114615da057600080fd5b50565b60028110615db057600080fd5b50565b615dbc81615b7c565b8114615dc757600080fd5b50565b615dd381615b86565b8114615dde57600080fd5b50565b615dea81615b93565b8114615df557600080fd5b5056fea264697066735822122003c334bc5c00177fe2249eac9e151884ef3a1365b9e3538193e4b947993238d264736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_setProposalThreshold(uint256)": {
        "details": "newProposalThreshold must be greater than the hardcoded min",
        "params": {
          "newProposalThreshold": "new proposal threshold"
        }
      },
      "_setQuorumVotes(uint256)": {
        "details": "newQuorumVotes must be greater than the hardcoded min",
        "params": {
          "newQuorumVotes": "new quorum votes"
        }
      },
      "_setVotingDelay(uint256)": {
        "params": {
          "newVotingDelay": "new voting delay, in blocks"
        }
      },
      "_setVotingPeriod(uint256)": {
        "params": {
          "newVotingPeriod": "new voting period, in blocks"
        }
      },
      "castVote(uint256,uint8)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "External function that accepts EIP-712 signatures for voting on proposals."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "reason": "The reason given for the vote by the voter",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "initialize(address,address,address,uint8,uint256,uint256,uint256,uint256)": {
        "params": {
          "proposalThreshold_": "The initial proposal threshold, in PCT_PRECISION",
          "quorumVotes_": "The amount of votes needed to pass a proposal, in PCT_PRECISION",
          "safe_": "The address of the Gnosis Safe",
          "token_": "The address of the governance token",
          "votingDelay_": "The initial voting delay",
          "votingPeriod_": "The initial voting period"
        }
      },
      "propose(address[],uint256[],string[],bytes[],string)": {
        "details": "propose to execute a series of transactions"
      }
    },
    "stateVariables": {
      "quorumVotes": {
        "details": "The percentage of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when implementation is changed"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is changed"
      },
      "ProposalCanceled(uint256)": {
        "notice": "An event emitted when a proposal has been canceled"
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint256)": {
        "notice": "An event emitted when a new proposal is created"
      },
      "ProposalExecuted(uint256)": {
        "notice": "An event emitted when a proposal has been executed in the Timelock"
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "An event emitted when a proposal has been queued in the Timelock"
      },
      "ProposalThresholdSet(uint256,uint256)": {
        "notice": "Emitted when proposal threshold is set"
      },
      "QuorumVotesSet(uint256,uint256)": {
        "notice": "An event emitted when the voting period is set"
      },
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "notice": "An event emitted when a vote has been cast on a proposal"
      },
      "VotingDelaySet(uint256,uint256)": {
        "notice": "An event emitted when the voting delay is set"
      },
      "VotingPeriodSet(uint256,uint256)": {
        "notice": "An event emitted when the voting period is set"
      }
    },
    "kind": "user",
    "methods": {
      "BALLOT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the ballot struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "MAX_PROPOSAL_THRESHOLD()": {
        "notice": "The maximum setable proposal threshold"
      },
      "MAX_QUORUM_VOTES()": {
        "notice": "The maximum setable quorum"
      },
      "MAX_VOTING_DELAY()": {
        "notice": "The max settable voting delay"
      },
      "MAX_VOTING_PERIOD()": {
        "notice": "The max settable voting period"
      },
      "MIN_PROPOSAL_THRESHOLD()": {
        "notice": "The minimum setable proposal threshold, in percent"
      },
      "MIN_QUORUM_VOTES()": {
        "notice": "The minimum setable quorum"
      },
      "MIN_VOTING_DELAY()": {
        "notice": "The min settable voting delay"
      },
      "MIN_VOTING_PERIOD()": {
        "notice": "The minimum settable voting period, in"
      },
      "NAME()": {
        "notice": "The name of this contract"
      },
      "_setProposalThreshold(uint256)": {
        "notice": "Admin function for setting the proposal threshold"
      },
      "_setQuorumVotes(uint256)": {
        "notice": "Admin function for setting the proposal threshold"
      },
      "_setVotingDelay(uint256)": {
        "notice": "Admin function for setting the voting delay"
      },
      "_setVotingPeriod(uint256)": {
        "notice": "Admin function for setting the voting period"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "castVote(uint256,uint8)": {
        "notice": "Cast a vote for a proposal"
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "notice": "Cast a vote for a proposal by signature"
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "notice": "Cast a vote for a proposal with a reason"
      },
      "initialProposalId()": {
        "notice": "Initial proposal id set at become"
      },
      "initialize(address,address,address,uint8,uint256,uint256,uint256,uint256)": {
        "notice": "Used to initialize the contract during delegator contructor"
      },
      "latestProposalIds(address)": {
        "notice": "The latest proposal for each proposer"
      },
      "proposalCount()": {
        "notice": "The total number of proposals"
      },
      "proposalMaxOperations()": {
        "notice": "The maximum number of actions that can be included in a proposal"
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer"
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed"
      },
      "queue(uint256)": {
        "notice": "approve the Hash of the transaction in gnosis safe, to be executed there"
      },
      "safe()": {
        "notice": "The address of the Gnosis Safe"
      },
      "token()": {
        "notice": "The address of the governance token"
      },
      "votingDelay()": {
        "notice": "The delay before voting on a proposal may take place, once proposed, in blocks"
      },
      "votingPeriod()": {
        "notice": "The duration of voting on a proposal, in blocks"
      }
    },
    "notice": "This is a stripped-down version of [GovernorBravo contracts](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/) - basically, we only kept the \"propose - vote -execute\" flow - add configuration options to the constructor: - `safe` -> the address of a Gnosis safe that holds the assets and will execut the proposals - `token` -> the address of a token that determines the Voting Power - `tokenType` -> the kind of token (either Minime or ERC20snapshot) - `quorumVotes` - `proposalThreshold` - `votingDelay` - `votingPeriod` - rename `timelock` to `safe`, and `comp` to `token` - upgrade to solidity 0.7.3, which required some changes in syntax - call `token.balanceOfAt()` instead of `token.getPriorVotes()` - base all voting logic on the basis of the voting power distribution at proposal creation (GovernorAlpha checks the voting proposalThreshold at the block bf proposal creation, and counts the votes from the start time of the proposal) - change the semantics of `quorumvotes` and `proposalThreshold` to percentages, not absolute figures - change the semantics of `queue` so that is queues the transaction for execution in the Gnosis safe (by alling `approveHash`) - change the semantics of `execute` so the proposal will be executed in the Gnosis Safe - - (todo: removed the logic related to timelocks, because in Lego this kind of safety mechanism has a better place on the Gnosis Safe ) - (todo: removed the logic related to the guardian, becuase in the Lego Architecture this kind of permissioning is easier handled on the Gnosis Safe) - (todo: removed the delegator pattern, and use openzeppelin style proxies instead)d",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1750,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "receipts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)3338_storage))"
      },
      {
        "astId": 1753,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1756,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "safe",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGnosisSafe)3178"
      },
      {
        "astId": 1759,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1761,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "tokenType",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(TokenType)3186"
      },
      {
        "astId": 1766,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)3331_storage)"
      },
      {
        "astId": 1769,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "votingDelay",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1772,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "votingPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1775,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1778,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "quorumVotes",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1781,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "initialProposalId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1784,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "proposalCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1789,
        "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IGnosisSafe)3178": {
        "encoding": "inplace",
        "label": "contract IGnosisSafe",
        "numberOfBytes": "20"
      },
      "t_enum(TokenType)3186": {
        "encoding": "inplace",
        "label": "enum IGovernorBravoDecisionEngine.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Receipt)3338_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGovernorBravoDecisionEngine.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)3338_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)3338_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IGovernorBravoDecisionEngine.Receipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Receipt)3338_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)3331_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGovernorBravoDecisionEngine.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)3331_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)3331_storage": {
        "encoding": "inplace",
        "label": "struct IGovernorBravoDecisionEngine.Proposal",
        "members": [
          {
            "astId": 3294,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3296,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3298,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3301,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "targets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3304,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3307,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "signatures",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3310,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "calldatas",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 3312,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3314,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "endBlock",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3316,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "forVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3318,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "againstVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 3320,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 3322,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "canceled",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 3324,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "executed",
            "offset": 1,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 3328,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "receipts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(Receipt)3338_storage)"
          },
          {
            "astId": 3330,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "snapshotId",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Receipt)3338_storage": {
        "encoding": "inplace",
        "label": "struct IGovernorBravoDecisionEngine.Receipt",
        "members": [
          {
            "astId": 3333,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3335,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3337,
            "contract": "contracts/decisionEngines/DecisionEngine01.sol:DecisionEngine01",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}